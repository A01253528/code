

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Oct 13 02:10:36 2022

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.44
    39                           ; Generated 14/09/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F45K20 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataBANK0
    74  001810                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for key_board@F3278
    78  001810  31                 	db	49
    79  001811  32                 	db	50
    80  001812  33                 	db	51
    81  001813  41                 	db	65
    82  001814  34                 	db	52
    83  001815  35                 	db	53
    84  001816  36                 	db	54
    85  001817  42                 	db	66
    86  001818  37                 	db	55
    87  001819  38                 	db	56
    88  00181A  39                 	db	57
    89  00181B  43                 	db	67
    90  00181C  23                 	db	35
    91  00181D  30                 	db	48
    92  00181E  2A                 	db	42
    93  00181F  44                 	db	68
    94                           
    95                           ;initializer for _S_Seg
    96  001820  30                 	db	48
    97  001821  31                 	db	49
    98  001822  32                 	db	50
    99  001823  33                 	db	51
   100  001824  34                 	db	52
   101  001825  35                 	db	53
   102  001826  36                 	db	54
   103  001827  37                 	db	55
   104  001828  38                 	db	56
   105  001829  39                 	db	57
   106  00182A  41                 	db	65
   107  00182B  42                 	db	66
   108  00182C  43                 	db	67
   109  00182D  44                 	db	68
   110  00182E  45                 	db	69
   111  00182F  46                 	db	70
   112                           
   113                           	psect	smallconst
   114  000600                     __psmallconst:
   115                           	opt stack 0
   116  000600  00                 	db	0
   117  000601                     _DIGITOS:
   118                           	opt stack 0
   119  000601  003F               	dw	63
   120  000603  0006               	dw	6
   121  000605  005B               	dw	91
   122  000607  004F               	dw	79
   123  000609  0066               	dw	102
   124  00060B  006D               	dw	109
   125  00060D  007D               	dw	125
   126  00060F  0007               	dw	7
   127  000611  007F               	dw	127
   128  000613  006F               	dw	111
   129  000615  0077               	dw	119
   130  000617  00FC               	dw	252
   131  000619  0039               	dw	57
   132  00061B  005E               	dw	94
   133  00061D  0079               	dw	121
   134  00061F  0071               	dw	113
   135  000621                     __end_of_DIGITOS:
   136                           	opt stack 0
   137  000621                     exp@coeff:
   138                           	opt stack 0
   139  000621  00                 	db	0
   140  000622  80                 	db	128
   141  000623  3F                 	db	63
   142  000624  72                 	db	114
   143  000625  31                 	db	49
   144  000626  3F                 	db	63
   145  000627  FE                 	db	254
   146  000628  75                 	db	117
   147  000629  3E                 	db	62
   148  00062A  58                 	db	88
   149  00062B  63                 	db	99
   150  00062C  3D                 	db	61
   151  00062D  95                 	db	149
   152  00062E  1D                 	db	29
   153  00062F  3C                 	db	60
   154  000630  C5                 	db	197
   155  000631  AE                 	db	174
   156  000632  3A                 	db	58
   157  000633  79                 	db	121
   158  000634  21                 	db	33
   159  000635  39                 	db	57
   160  000636  94                 	db	148
   161  000637  80                 	db	128
   162  000638  37                 	db	55
   163  000639  93                 	db	147
   164  00063A  A7                 	db	167
   165  00063B  35                 	db	53
   166  00063C  56                 	db	86
   167  00063D  15                 	db	21
   168  00063E  34                 	db	52
   169  00063F                     __end_ofexp@coeff:
   170                           	opt stack 0
   171  00063F                     log@coeff:
   172                           	opt stack 0
   173  00063F  00                 	db	0
   174  000640  00                 	db	0
   175  000641  00                 	db	0
   176  000642  00                 	db	0
   177  000643  80                 	db	128
   178  000644  3F                 	db	63
   179  000645  F0                 	db	240
   180  000646  FF                 	db	255
   181  000647  BE                 	db	190
   182  000648  E2                 	db	226
   183  000649  A9                 	db	169
   184  00064A  3E                 	db	62
   185  00064B  83                 	db	131
   186  00064C  76                 	db	118
   187  00064D  BE                 	db	190
   188  00064E  AE                 	db	174
   189  00064F  2B                 	db	43
   190  000650  3E                 	db	62
   191  000651  3C                 	db	60
   192  000652  C3                 	db	195
   193  000653  BD                 	db	189
   194  000654  D2                 	db	210
   195  000655  13                 	db	19
   196  000656  3D                 	db	61
   197  000657  78                 	db	120
   198  000658  D3                 	db	211
   199  000659  BB                 	db	187
   200  00065A                     __end_oflog@coeff:
   201                           	opt stack 0
   202  0000                     _PORTBbits	set	3969
   203  0000                     _ANSELH	set	3967
   204  0000                     _ANSEL	set	3966
   205  0000                     _PORTB	set	3969
   206  0000                     _PORTD	set	3971
   207  0000                     _PORTC	set	3970
   208  0000                     _TRISC	set	3988
   209  0000                     _TRISD	set	3989
   210  0000                     _TRISB	set	3987
   211                           
   212                           ; #config settings
   213  00065A  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  001728                     __pcinit:
   217                           	opt stack 0
   218  001728                     start_initialization:
   219                           	opt stack 0
   220  001728                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to BANK0 (32 bytes)
   224                           ; load TBLPTR registers with __pidataBANK0
   225  001728  0E10               	movlw	low __pidataBANK0
   226  00172A  6EF6               	movwf	tblptrl,c
   227  00172C  0E18               	movlw	high __pidataBANK0
   228  00172E  6EF7               	movwf	tblptrh,c
   229  001730  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   230  001732  6EF8               	movwf	tblptru,c
   231  001734  EE00  F060         	lfsr	0,__pdataBANK0
   232  001738  EE10 F020          	lfsr	1,32
   233  00173C                     copy_data0:
   234  00173C  0009               	tblrd		*+
   235  00173E  CFF5 FFEE          	movff	tablat,postinc0
   236  001742  50E5               	movf	postdec1,w,c
   237  001744  50E1               	movf	fsr1l,w,c
   238  001746  E1FA               	bnz	copy_data0
   239                           
   240                           ; Clear objects allocated to BANK0 (4 bytes)
   241  001748  0100               	movlb	0
   242  00174A  6B9E               	clrf	(__pbssBANK0+3)& (0+255),b
   243  00174C  6B9D               	clrf	(__pbssBANK0+2)& (0+255),b
   244  00174E  6B9C               	clrf	(__pbssBANK0+1)& (0+255),b
   245  001750  6B9B               	clrf	__pbssBANK0& (0+255),b
   246                           
   247                           ; Clear objects allocated to COMRAM (5 bytes)
   248  001752  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   249  001754  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   250  001756  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   251  001758  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   252  00175A  6A59               	clrf	__pbssCOMRAM& (0+255),c
   253  00175C                     end_of_initialization:
   254                           	opt stack 0
   255  00175C                     __end_of__initialization:
   256                           	opt stack 0
   257  00175C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   258  00175E  6EF8               	movwf	tblptru,c
   259  001760  0100               	movlb	0
   260  001762  EFCF  F00B         	goto	_main	;jump to C main() function
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           postdec1	equ	0xFE5
   267                           fsr1l	equ	0xFE1
   268                           
   269                           	psect	bssCOMRAM
   270  000059                     __pbssCOMRAM:
   271                           	opt stack 0
   272  000059                     _errno:
   273                           	opt stack 0
   274  000059                     	ds	2
   275  00005B                     _flag:
   276                           	opt stack 0
   277  00005B                     	ds	2
   278  00005D                     _letra:
   279                           	opt stack 0
   280  00005D                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	bssBANK0
   290  00009B                     __pbssBANK0:
   291                           	opt stack 0
   292  00009B                     _resultado:
   293                           	opt stack 0
   294  00009B                     	ds	4
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           postinc0	equ	0xFEE
   300                           postdec1	equ	0xFE5
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	dataBANK0
   304  000060                     __pdataBANK0:
   305                           	opt stack 0
   306  000060                     key_board@F3278:
   307                           	opt stack 0
   308  000060                     	ds	16
   309  000070                     _S_Seg:
   310                           	opt stack 0
   311  000070                     	ds	16
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	cstackBANK0
   321  000080                     __pcstackBANK0:
   322                           	opt stack 0
   323  000080                     key_board@keys:
   324                           	opt stack 0
   325                           
   326                           ; 16 bytes @ 0x0
   327  000080                     	ds	16
   328  000090                     _key_board$795:
   329                           	opt stack 0
   330                           
   331                           ; 3 bytes @ 0x10
   332  000090                     	ds	3
   333  000093                     _key_board$796:
   334                           	opt stack 0
   335                           
   336                           ; 3 bytes @ 0x13
   337  000093                     	ds	3
   338  000096                     key_board@key_pres:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x16
   342  000096                     	ds	1
   343  000097                     key_board@columna:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x17
   347  000097                     	ds	2
   348  000099                     key_board@counter_filas:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x19
   352  000099                     	ds	2
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           postdec1	equ	0xFE5
   359                           fsr1l	equ	0xFE1
   360                           
   361                           	psect	cstackCOMRAM
   362  000001                     __pcstackCOMRAM:
   363                           	opt stack 0
   364  000001                     ?___wmul:
   365                           	opt stack 0
   366  000001                     ?___ftpack:
   367                           	opt stack 0
   368  000001                     ?_frexp:
   369                           	opt stack 0
   370  000001                     ?___ftneg:
   371                           	opt stack 0
   372  000001                     Seg_display@digito:
   373                           	opt stack 0
   374  000001                     ___wmul@multiplier:
   375                           	opt stack 0
   376  000001                     ___ftpack@arg:
   377                           	opt stack 0
   378  000001                     ___ftge@ff1:
   379                           	opt stack 0
   380  000001                     ___ftneg@f1:
   381                           	opt stack 0
   382  000001                     frexp@value:
   383                           	opt stack 0
   384                           
   385                           ; 3 bytes @ 0x0
   386  000001                     	ds	2
   387  000003                     ___wmul@multiplicand:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x2
   391  000003                     	ds	1
   392  000004                     ___ftpack@exp:
   393                           	opt stack 0
   394  000004                     frexp@eptr:
   395                           	opt stack 0
   396  000004                     ___ftge@ff2:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x3
   400  000004                     	ds	1
   401  000005                     ___ftpack@sign:
   402                           	opt stack 0
   403  000005                     ___wmul@product:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x4
   407  000005                     	ds	1
   408  000006                     ??___ftpack:
   409  000006                     ??_frexp:
   410                           
   411                           ; 1 bytes @ 0x5
   412  000006                     	ds	1
   413  000007                     ??___ftge:
   414                           
   415                           ; 1 bytes @ 0x6
   416  000007                     	ds	2
   417  000009                     ?___ftdiv:
   418                           	opt stack 0
   419  000009                     ?___awtoft:
   420                           	opt stack 0
   421  000009                     ?___lltoft:
   422                           	opt stack 0
   423  000009                     ___awtoft@c:
   424                           	opt stack 0
   425  000009                     ___ftdiv@f1:
   426                           	opt stack 0
   427  000009                     ___lltoft@c:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x8
   431  000009                     	ds	3
   432  00000C                     ___awtoft@sign:
   433                           	opt stack 0
   434  00000C                     ___ftdiv@f2:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0xB
   438  00000C                     	ds	1
   439  00000D                     ??___lltoft:
   440  00000D                     ?___ftmul:
   441                           	opt stack 0
   442  00000D                     ?___fttol:
   443                           	opt stack 0
   444  00000D                     ___ftmul@f1:
   445                           	opt stack 0
   446  00000D                     ___fttol@f1:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0xC
   450  00000D                     	ds	2
   451  00000F                     ??___ftdiv:
   452                           
   453                           ; 1 bytes @ 0xE
   454  00000F                     	ds	1
   455  000010                     ___ftmul@f2:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0xF
   459  000010                     	ds	1
   460  000011                     ??___fttol:
   461  000011                     ___lltoft@exp:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x10
   465  000011                     	ds	1
   466  000012                     ___ftdiv@cntr:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x11
   470  000012                     	ds	1
   471  000013                     ??___ftmul:
   472  000013                     ___ftdiv@f3:
   473                           	opt stack 0
   474                           
   475                           ; 3 bytes @ 0x12
   476  000013                     	ds	3
   477  000016                     ___ftdiv@exp:
   478                           	opt stack 0
   479  000016                     ___ftmul@exp:
   480                           	opt stack 0
   481  000016                     ___fttol@sign1:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x15
   485  000016                     	ds	1
   486  000017                     ___ftdiv@sign:
   487                           	opt stack 0
   488  000017                     ___ftmul@f3_as_product:
   489                           	opt stack 0
   490  000017                     ___fttol@lval:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x16
   494  000017                     	ds	3
   495  00001A                     ___ftmul@cntr:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x19
   499  00001A                     	ds	1
   500  00001B                     ___ftmul@sign:
   501                           	opt stack 0
   502  00001B                     ___fttol@exp1:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x1A
   506  00001B                     	ds	1
   507  00001C                     ?___ftadd:
   508                           	opt stack 0
   509  00001C                     ?___altoft:
   510                           	opt stack 0
   511  00001C                     ___ftadd@f1:
   512                           	opt stack 0
   513  00001C                     ___altoft@c:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x1B
   517  00001C                     	ds	3
   518  00001F                     ___ftadd@f2:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x1E
   522  00001F                     	ds	1
   523  000020                     ??___altoft:
   524                           
   525                           ; 1 bytes @ 0x1F
   526  000020                     	ds	2
   527  000022                     ??___ftadd:
   528                           
   529                           ; 1 bytes @ 0x21
   530  000022                     	ds	2
   531  000024                     ___altoft@exp:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x23
   535  000024                     	ds	1
   536  000025                     ___altoft@sign:
   537                           	opt stack 0
   538  000025                     ___ftadd@sign:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x24
   542  000025                     	ds	1
   543  000026                     ___ftadd@exp2:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x25
   547  000026                     	ds	1
   548  000027                     ___ftadd@exp1:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x26
   552  000027                     	ds	1
   553  000028                     ?___ftsub:
   554                           	opt stack 0
   555  000028                     ?_floor:
   556                           	opt stack 0
   557  000028                     ?_eval_poly:
   558                           	opt stack 0
   559  000028                     ___ftsub@f1:
   560                           	opt stack 0
   561  000028                     floor@x:
   562                           	opt stack 0
   563  000028                     eval_poly@x:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x27
   567  000028                     	ds	3
   568  00002B                     eval_poly@d:
   569                           	opt stack 0
   570  00002B                     ___ftsub@f2:
   571                           	opt stack 0
   572  00002B                     floor@i:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x2A
   576  00002B                     	ds	2
   577  00002D                     eval_poly@n:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x2C
   581  00002D                     	ds	1
   582  00002E                     floor@expon:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x2D
   586  00002E                     	ds	1
   587  00002F                     ??_eval_poly:
   588                           
   589                           ; 1 bytes @ 0x2E
   590  00002F                     	ds	2
   591  000031                     eval_poly@res:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x30
   595  000031                     	ds	3
   596  000034                     ?_log:
   597                           	opt stack 0
   598  000034                     ?_ldexp:
   599                           	opt stack 0
   600  000034                     ldexp@value:
   601                           	opt stack 0
   602  000034                     log@x:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x33
   606  000034                     	ds	3
   607  000037                     ldexp@newexp:
   608                           	opt stack 0
   609  000037                     log@exponent:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x36
   613  000037                     	ds	2
   614  000039                     ??_ldexp:
   615                           
   616                           ; 1 bytes @ 0x38
   617  000039                     	ds	2
   618  00003B                     ?_exp:
   619                           	opt stack 0
   620  00003B                     exp@x:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x3A
   624  00003B                     	ds	3
   625  00003E                     _exp$799:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x3D
   629  00003E                     	ds	3
   630  000041                     exp@exponent:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x40
   634  000041                     	ds	2
   635  000043                     exp@sign:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x42
   639  000043                     	ds	1
   640  000044                     ?_pow:
   641                           	opt stack 0
   642  000044                     pow@x:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x43
   646  000044                     	ds	3
   647  000047                     pow@y:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x46
   651  000047                     	ds	3
   652  00004A                     _pow$797:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x49
   656  00004A                     	ds	3
   657  00004D                     _pow$798:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x4C
   661  00004D                     	ds	3
   662  000050                     pow@sign:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x4F
   666  000050                     	ds	1
   667  000051                     pow@yi:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x50
   671  000051                     	ds	4
   672  000055                     ??_key_board:
   673                           
   674                           ; 1 bytes @ 0x54
   675  000055                     	ds	4
   676  000059                     tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           tblptrl	equ	0xFF6
   679                           tablat	equ	0xFF5
   680                           postinc0	equ	0xFEE
   681                           postdec1	equ	0xFE5
   682                           fsr1l	equ	0xFE1
   683                           
   684                           ; 1 bytes @ 0x58
   685 ;;
   686 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   687 ;;
   688 ;; *************** function _main *****************
   689 ;; Defined at:
   690 ;;		line 45 in file "main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   704 ;;      Params:         0       0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0       0
   707 ;;      Totals:         0       0       0       0       0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels required when called:    6
   710 ;; This function calls:
   711 ;;		_Seg_display
   712 ;;		_key_board
   713 ;; This function is called by:
   714 ;;		Startup code after reset
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text0
   719  00179E                     __ptext0:
   720                           	opt stack 0
   721  00179E                     _main:
   722                           	opt stack 25
   723                           
   724                           ;main.c: 46: TRISB = 255;
   725                           
   726                           ;incstack = 0
   727  00179E  6893               	setf	3987,c	;volatile
   728                           
   729                           ;main.c: 47: TRISD = 0;
   730  0017A0  0E00               	movlw	0
   731  0017A2  6E95               	movwf	3989,c	;volatile
   732                           
   733                           ;main.c: 48: TRISC = 0;
   734  0017A4  0E00               	movlw	0
   735  0017A6  6E94               	movwf	3988,c	;volatile
   736                           
   737                           ;main.c: 49: PORTC = 0;
   738  0017A8  0E00               	movlw	0
   739  0017AA  6E82               	movwf	3970,c	;volatile
   740                           
   741                           ;main.c: 50: PORTD = 0;
   742  0017AC  0E00               	movlw	0
   743  0017AE  6E83               	movwf	3971,c	;volatile
   744                           
   745                           ;main.c: 51: PORTB = 0;
   746  0017B0  0E00               	movlw	0
   747  0017B2  6E81               	movwf	3969,c	;volatile
   748                           
   749                           ;main.c: 53: ANSEL = 0;
   750  0017B4  0E00               	movlw	0
   751  0017B6  6E7E               	movwf	3966,c	;volatile
   752                           
   753                           ;main.c: 54: ANSELH = 0;
   754  0017B8  0E00               	movlw	0
   755  0017BA  6E7F               	movwf	3967,c	;volatile
   756  0017BC                     
   757                           ;main.c: 57: Seg_display(key_board ());
   758  0017BC  EC66  F006         	call	_key_board	;wreg free
   759  0017C0  ECAF  F005         	call	_Seg_display
   760  0017C4  D7FB               	goto	l41
   761  0017C6                     __end_of_main:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           postdec1	equ	0xFE5
   769                           fsr1l	equ	0xFE1
   770                           
   771 ;; *************** function _key_board *****************
   772 ;; Defined at:
   773 ;;		line 62 in file "main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  keys           16    0[BANK0 ] unsigned char [4][4]
   778 ;;  counter_fila    2   25[BANK0 ] int 
   779 ;;  columna         2   23[BANK0 ] int 
   780 ;;  key_pres        1   22[BANK0 ] unsigned char 
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      unsigned char 
   783 ;; Registers used:
   784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   790 ;;      Params:         0       0       0       0       0       0       0
   791 ;;      Locals:         0      27       0       0       0       0       0
   792 ;;      Temps:          4       0       0       0       0       0       0
   793 ;;      Totals:         4      27       0       0       0       0       0
   794 ;;Total ram usage:       31 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; Hardware stack levels required when called:    5
   797 ;; This function calls:
   798 ;;		___awtoft
   799 ;;		___fttol
   800 ;;		_pow
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text1
   807  000CCC                     __ptext1:
   808                           	opt stack 0
   809  000CCC                     _key_board:
   810                           	opt stack 25
   811                           
   812                           ;main.c: 63: int counter_filas;
   813                           ;main.c: 64: char key_pres = 'z';
   814                           
   815                           ;incstack = 0
   816  000CCC  0E7A               	movlw	122
   817  000CCE  0100               	movlb	0	; () banked
   818  000CD0  6F96               	movwf	key_board@key_pres& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821                           ;main.c: 65: int columna;
   822                           ;main.c: 66: char keys[4][4] = {
   823                           ;main.c: 67: { '1','2','3', 'A' },
   824                           ;main.c: 68: { '4','5','6', 'B' },
   825                           ;main.c: 69: { '7','8','9', 'C' },
   826                           ;main.c: 70: { '#','0','*', 'D' }
   827                           ;main.c: 71: };
   828  000CD2  EE20  F060         	lfsr	2,key_board@F3278
   829  000CD6  EE10  F080         	lfsr	1,key_board@keys
   830  000CDA  0E0F               	movlw	15
   831  000CDC                     u1811:
   832  000CDC  CFDB FFE3          	movff	plusw2,plusw1
   833  000CE0  06E8               	decf	wreg,f,c
   834  000CE2  E2FC               	bc	u1811
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 73: for( counter_filas = 0; counter_filas<= 3;counter_filas++){
   838  000CE4  0E00               	movlw	0
   839  000CE6  6F9A               	movwf	(key_board@counter_filas+1)& (0+255),b
   840  000CE8  0E00               	movlw	0
   841  000CEA  6F99               	movwf	key_board@counter_filas& (0+255),b
   842                           
   843                           ; BSR set to: 0
   844  000CEC  BF9A               	btfsc	(key_board@counter_filas+1)& (0+255),7,b
   845  000CEE  D006               	goto	l49
   846  000CF0  519A               	movf	(key_board@counter_filas+1)& (0+255),w,b
   847  000CF2  E170               	bnz	l50
   848  000CF4  0E04               	movlw	4
   849  000CF6  5D99               	subwf	key_board@counter_filas& (0+255),w,b
   850  000CF8  B0D8               	btfsc	status,0,c
   851  000CFA  D06C               	goto	u1880
   852  000CFC                     l49:
   853                           
   854                           ; BSR set to: 0
   855                           ;main.c: 74: PORTD = pow(2,counter_filas);
   856                           
   857                           ; BSR set to: 0
   858  000CFC  C099  F009         	movff	key_board@counter_filas,___awtoft@c
   859  000D00  C09A  F00A         	movff	key_board@counter_filas+1,___awtoft@c+1
   860  000D04  ECB3  F00B         	call	___awtoft	;wreg free
   861  000D08  C009  F090         	movff	?___awtoft,_key_board$795
   862  000D0C  C00A  F091         	movff	?___awtoft+1,_key_board$795+1
   863  000D10  C00B  F092         	movff	?___awtoft+2,_key_board$795+2
   864                           
   865                           ;main.c: 74: PORTD = pow(2,counter_filas);
   866  000D14  C090  F047         	movff	_key_board$795,pow@y
   867  000D18  C091  F048         	movff	_key_board$795+1,pow@y+1
   868  000D1C  C092  F049         	movff	_key_board$795+2,pow@y+2
   869  000D20  0E00               	movlw	0
   870  000D22  6E44               	movwf	pow@x,c
   871  000D24  0E00               	movlw	0
   872  000D26  6E45               	movwf	pow@x+1,c
   873  000D28  0E40               	movlw	64
   874  000D2A  6E46               	movwf	pow@x+2,c
   875  000D2C  ECF6  F004         	call	_pow	;wreg free
   876  000D30  C044  F093         	movff	?_pow,_key_board$796
   877  000D34  C045  F094         	movff	?_pow+1,_key_board$796+1
   878  000D38  C046  F095         	movff	?_pow+2,_key_board$796+2
   879                           
   880                           ;main.c: 74: PORTD = pow(2,counter_filas);
   881  000D3C  C093  F00D         	movff	_key_board$796,___fttol@f1
   882  000D40  C094  F00E         	movff	_key_board$796+1,___fttol@f1+1
   883  000D44  C095  F00F         	movff	_key_board$796+2,___fttol@f1+2
   884  000D48  EC83  F007         	call	___fttol	;wreg free
   885  000D4C  500D               	movf	?___fttol,w,c
   886  000D4E  6E83               	movwf	3971,c	;volatile
   887                           
   888                           ;main.c: 75: if(PORTB > 0){
   889  000D50  5081               	movf	3969,w,c	;volatile
   890  000D52  B4D8               	btfsc	status,2,c
   891  000D54  D037               	goto	l51
   892                           
   893                           ;main.c: 76: if(PORTBbits.RB0){columna = 0; }
   894  000D56  A081               	btfss	3969,0,c	;volatile
   895  000D58  D005               	goto	l52
   896  000D5A  0E00               	movlw	0
   897  000D5C  0100               	movlb	0	; () banked
   898  000D5E  6F98               	movwf	(key_board@columna+1)& (0+255),b
   899  000D60  0E00               	movlw	0
   900  000D62  6F97               	movwf	key_board@columna& (0+255),b
   901  000D64                     l52:
   902                           
   903                           ;main.c: 77: if(PORTBbits.RB1){columna = 1; }
   904                           
   905                           ; BSR set to: 0
   906  000D64  A281               	btfss	3969,1,c	;volatile
   907  000D66  D005               	goto	l53
   908  000D68  0E00               	movlw	0
   909  000D6A  0100               	movlb	0	; () banked
   910  000D6C  6F98               	movwf	(key_board@columna+1)& (0+255),b
   911  000D6E  0E01               	movlw	1
   912  000D70  6F97               	movwf	key_board@columna& (0+255),b
   913  000D72                     l53:
   914                           
   915                           ;main.c: 78: if(PORTBbits.RB2){columna = 2; }
   916                           
   917                           ; BSR set to: 0
   918  000D72  A481               	btfss	3969,2,c	;volatile
   919  000D74  D005               	goto	l54
   920  000D76  0E00               	movlw	0
   921  000D78  0100               	movlb	0	; () banked
   922  000D7A  6F98               	movwf	(key_board@columna+1)& (0+255),b
   923  000D7C  0E02               	movlw	2
   924  000D7E  6F97               	movwf	key_board@columna& (0+255),b
   925  000D80                     l54:
   926                           
   927                           ;main.c: 79: if(PORTBbits.RB3){columna = 3; }
   928                           
   929                           ; BSR set to: 0
   930  000D80  A681               	btfss	3969,3,c	;volatile
   931  000D82  D005               	goto	l55
   932  000D84  0E00               	movlw	0
   933  000D86  0100               	movlb	0	; () banked
   934  000D88  6F98               	movwf	(key_board@columna+1)& (0+255),b
   935  000D8A  0E03               	movlw	3
   936  000D8C  6F97               	movwf	key_board@columna& (0+255),b
   937  000D8E                     l55:
   938                           
   939                           ;main.c: 80: key_pres = keys[counter_filas][columna];
   940                           
   941                           ; BSR set to: 0
   942  000D8E  C099  F055         	movff	key_board@counter_filas,??_key_board
   943  000D92  C09A  F056         	movff	key_board@counter_filas+1,??_key_board+1
   944  000D96  90D8               	bcf	status,0,c
   945  000D98  3655               	rlcf	??_key_board,f,c
   946  000D9A  3656               	rlcf	??_key_board+1,f,c
   947  000D9C  90D8               	bcf	status,0,c
   948  000D9E  3655               	rlcf	??_key_board,f,c
   949  000DA0  3656               	rlcf	??_key_board+1,f,c
   950  000DA2  0E80               	movlw	low key_board@keys
   951  000DA4  6E57               	movwf	(??_key_board+2)& (0+255),c
   952  000DA6  0E00               	movlw	high key_board@keys
   953  000DA8  6E58               	movwf	(??_key_board+3)& (0+255),c
   954  000DAA  5055               	movf	??_key_board,w,c
   955  000DAC  2657               	addwf	??_key_board+2,f,c
   956  000DAE  5056               	movf	??_key_board+1,w,c
   957  000DB0  2258               	addwfc	??_key_board+3,f,c
   958  000DB2  0100               	movlb	0	; () banked
   959  000DB4  5197               	movf	key_board@columna& (0+255),w,b
   960  000DB6  2457               	addwf	??_key_board+2,w,c
   961  000DB8  6ED9               	movwf	fsr2l,c
   962  000DBA  5198               	movf	(key_board@columna+1)& (0+255),w,b
   963  000DBC  2058               	addwfc	??_key_board+3,w,c
   964  000DBE  6EDA               	movwf	fsr2h,c
   965  000DC0  50DF               	movf	indf2,w,c
   966  000DC2  6F96               	movwf	key_board@key_pres& (0+255),b
   967  000DC4                     l51:
   968                           
   969                           ; BSR set to: 0
   970  000DC4  0100               	movlb	0	; () banked
   971  000DC6  4B99               	infsnz	key_board@counter_filas& (0+255),f,b
   972  000DC8  2B9A               	incf	(key_board@counter_filas+1)& (0+255),f,b
   973                           
   974                           ; BSR set to: 0
   975  000DCA  BF9A               	btfsc	(key_board@counter_filas+1)& (0+255),7,b
   976  000DCC  D797               	goto	l49
   977  000DCE  519A               	movf	(key_board@counter_filas+1)& (0+255),w,b
   978  000DD0  E101               	bnz	l1988
   979  000DD2  D790               	goto	L1
   980  000DD4                     u1880:
   981  000DD4                     l50:
   982  000DD4                     l1988:
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 81: }
   986                           ;main.c: 82: }
   987                           ;main.c: 84: _delay((unsigned long)((50)*(1000000/4000.0)));
   988  000DD4  0E11               	movlw	17
   989  000DD6  6E55               	movwf	??_key_board& (0+255),c
   990  000DD8  0E3A               	movlw	58
   991  000DDA                     u1897:
   992  000DDA  2EE8               	decfsz	wreg,f,c
   993  000DDC  D7FE               	bra	u1897
   994  000DDE  2E55               	decfsz	??_key_board& (0+255),f,c
   995  000DE0  D7FC               	bra	u1897
   996  000DE2  F000 F000          	nop2	
   997                           
   998                           ;main.c: 85: return key_pres;
   999  000DE6  0100               	movlb	0	; () banked
  1000  000DE8  5196               	movf	key_board@key_pres& (0+255),w,b
  1001  000DEA  0012               	return	
  1002  000DEC                     __end_of_key_board:
  1003                           	opt stack 0
  1004                           tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postdec1	equ	0xFE5
  1011                           plusw1	equ	0xFE3
  1012                           fsr1l	equ	0xFE1
  1013                           indf2	equ	0xFDF
  1014                           plusw2	equ	0xFDB
  1015                           fsr2h	equ	0xFDA
  1016                           fsr2l	equ	0xFD9
  1017                           status	equ	0xFD8
  1018                           
  1019 ;; *************** function _pow *****************
  1020 ;; Defined at:
  1021 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  x               3   67[COMRAM] unsigned char 
  1024 ;;  y               3   70[COMRAM] unsigned char 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  yi              4   80[COMRAM] unsigned long 
  1027 ;;  sign            1   79[COMRAM] unsigned char 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  3   67[COMRAM] unsigned char 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1037 ;;      Params:         6       0       0       0       0       0       0
  1038 ;;      Locals:        11       0       0       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0
  1040 ;;      Totals:        17       0       0       0       0       0       0
  1041 ;;Total ram usage:       17 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    4
  1044 ;; This function calls:
  1045 ;;		___ftge
  1046 ;;		___ftmul
  1047 ;;		___ftneg
  1048 ;;		___fttol
  1049 ;;		___lltoft
  1050 ;;		_exp
  1051 ;;		_log
  1052 ;; This function is called by:
  1053 ;;		_key_board
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text2
  1058  0009EC                     __ptext2:
  1059                           	opt stack 0
  1060  0009EC                     _pow:
  1061                           	opt stack 25
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;incstack = 0
  1065  0009EC  0E00               	movlw	0
  1066  0009EE  6E50               	movwf	pow@sign,c
  1067  0009F0  5044               	movf	pow@x,w,c
  1068  0009F2  1045               	iorwf	pow@x+1,w,c
  1069  0009F4  1046               	iorwf	pow@x+2,w,c
  1070  0009F6  A4D8               	btfss	status,2,c
  1071  0009F8  D01B               	goto	l517
  1072  0009FA  0E00               	movlw	0
  1073  0009FC  6E01               	movwf	___ftge@ff1,c
  1074  0009FE  0E00               	movlw	0
  1075  000A00  6E02               	movwf	___ftge@ff1+1,c
  1076  000A02  0E00               	movlw	0
  1077  000A04  6E03               	movwf	___ftge@ff1+2,c
  1078  000A06  C047  F004         	movff	pow@y,___ftge@ff2
  1079  000A0A  C048  F005         	movff	pow@y+1,___ftge@ff2+1
  1080  000A0E  C049  F006         	movff	pow@y+2,___ftge@ff2+2
  1081  000A12  ECC2  F00A         	call	___ftge	;wreg free
  1082  000A16  A0D8               	btfss	status,0,c
  1083  000A18  D004               	goto	l518
  1084  000A1A  0E00               	movlw	0
  1085  000A1C  6E5A               	movwf	_errno+1,c
  1086  000A1E  0E21               	movlw	33
  1087  000A20  6E59               	movwf	_errno,c
  1088  000A22                     l518:
  1089  000A22  0E00               	movlw	0
  1090  000A24  6E44               	movwf	?_pow,c
  1091  000A26  0E00               	movlw	0
  1092  000A28  6E45               	movwf	?_pow+1,c
  1093  000A2A  0E00               	movlw	0
  1094  000A2C  6E46               	movwf	?_pow+2,c
  1095  000A2E  0012               	return	
  1096  000A30                     l517:
  1097  000A30  5047               	movf	pow@y,w,c
  1098  000A32  1048               	iorwf	pow@y+1,w,c
  1099  000A34  1049               	iorwf	pow@y+2,w,c
  1100  000A36  A4D8               	btfss	status,2,c
  1101  000A38  D007               	goto	l520
  1102  000A3A  0E00               	movlw	0
  1103  000A3C  6E44               	movwf	?_pow,c
  1104  000A3E  0E80               	movlw	128
  1105  000A40  6E45               	movwf	?_pow+1,c
  1106  000A42  0E3F               	movlw	63
  1107  000A44  6E46               	movwf	?_pow+2,c
  1108  000A46  0012               	return	
  1109  000A48                     l520:
  1110  000A48  AE46               	btfss	pow@x+2,7,c
  1111  000A4A  D040               	goto	l521
  1112  000A4C  C047  F00D         	movff	pow@y,___fttol@f1
  1113  000A50  C048  F00E         	movff	pow@y+1,___fttol@f1+1
  1114  000A54  C049  F00F         	movff	pow@y+2,___fttol@f1+2
  1115  000A58  EC83  F007         	call	___fttol	;wreg free
  1116  000A5C  C00D  F051         	movff	?___fttol,pow@yi
  1117  000A60  C00E  F052         	movff	?___fttol+1,pow@yi+1
  1118  000A64  C00F  F053         	movff	?___fttol+2,pow@yi+2
  1119  000A68  C010  F054         	movff	?___fttol+3,pow@yi+3
  1120  000A6C  C051  F009         	movff	pow@yi,___lltoft@c
  1121  000A70  C052  F00A         	movff	pow@yi+1,___lltoft@c+1
  1122  000A74  C053  F00B         	movff	pow@yi+2,___lltoft@c+2
  1123  000A78  C054  F00C         	movff	pow@yi+3,___lltoft@c+3
  1124  000A7C  EC46  F00B         	call	___lltoft	;wreg free
  1125  000A80  5047               	movf	pow@y,w,c
  1126  000A82  1809               	xorwf	?___lltoft,w,c
  1127  000A84  E107               	bnz	u1790
  1128  000A86  5048               	movf	pow@y+1,w,c
  1129  000A88  180A               	xorwf	?___lltoft+1,w,c
  1130  000A8A  E104               	bnz	u1790
  1131  000A8C  5049               	movf	pow@y+2,w,c
  1132  000A8E  180B               	xorwf	?___lltoft+2,w,c
  1133  000A90  B4D8               	btfsc	status,2,c
  1134  000A92  D00B               	goto	l522
  1135  000A94                     u1790:
  1136  000A94  0E00               	movlw	0
  1137  000A96  6E5A               	movwf	_errno+1,c
  1138  000A98  0E21               	movlw	33
  1139  000A9A  6E59               	movwf	_errno,c
  1140  000A9C  0E00               	movlw	0
  1141  000A9E  6E44               	movwf	?_pow,c
  1142  000AA0  0E00               	movlw	0
  1143  000AA2  6E45               	movwf	?_pow+1,c
  1144  000AA4  0E00               	movlw	0
  1145  000AA6  6E46               	movwf	?_pow+2,c
  1146  000AA8  0012               	return	
  1147  000AAA                     l522:
  1148  000AAA  5051               	movf	pow@yi,w,c
  1149  000AAC  0B01               	andlw	1
  1150  000AAE  6E50               	movwf	pow@sign,c
  1151  000AB0  C044  F001         	movff	pow@x,___ftneg@f1
  1152  000AB4  C045  F002         	movff	pow@x+1,___ftneg@f1+1
  1153  000AB8  C046  F003         	movff	pow@x+2,___ftneg@f1+2
  1154  000ABC  ECF6  F00B         	call	___ftneg	;wreg free
  1155  000AC0  C001  F044         	movff	?___ftneg,pow@x
  1156  000AC4  C002  F045         	movff	?___ftneg+1,pow@x+1
  1157  000AC8  C003  F046         	movff	?___ftneg+2,pow@x+2
  1158  000ACC                     l521:
  1159  000ACC  C044  F034         	movff	pow@x,log@x
  1160  000AD0  C045  F035         	movff	pow@x+1,log@x+1
  1161  000AD4  C046  F036         	movff	pow@x+2,log@x+2
  1162  000AD8  ECF6  F006         	call	_log	;wreg free
  1163  000ADC  C034  F04A         	movff	?_log,_pow$797
  1164  000AE0  C035  F04B         	movff	?_log+1,_pow$797+1
  1165  000AE4  C036  F04C         	movff	?_log+2,_pow$797+2
  1166  000AE8  C04A  F00D         	movff	_pow$797,___ftmul@f1
  1167  000AEC  C04B  F00E         	movff	_pow$797+1,___ftmul@f1+1
  1168  000AF0  C04C  F00F         	movff	_pow$797+2,___ftmul@f1+2
  1169  000AF4  C047  F010         	movff	pow@y,___ftmul@f2
  1170  000AF8  C048  F011         	movff	pow@y+1,___ftmul@f2+1
  1171  000AFC  C049  F012         	movff	pow@y+2,___ftmul@f2+2
  1172  000B00  ECFD  F007         	call	___ftmul	;wreg free
  1173  000B04  C00D  F04D         	movff	?___ftmul,_pow$798
  1174  000B08  C00E  F04E         	movff	?___ftmul+1,_pow$798+1
  1175  000B0C  C00F  F04F         	movff	?___ftmul+2,_pow$798+2
  1176  000B10  C04D  F03B         	movff	_pow$798,exp@x
  1177  000B14  C04E  F03C         	movff	_pow$798+1,exp@x+1
  1178  000B18  C04F  F03D         	movff	_pow$798+2,exp@x+2
  1179  000B1C  EC2E  F003         	call	_exp	;wreg free
  1180  000B20  C03B  F044         	movff	?_exp,pow@x
  1181  000B24  C03C  F045         	movff	?_exp+1,pow@x+1
  1182  000B28  C03D  F046         	movff	?_exp+2,pow@x+2
  1183  000B2C  5050               	movf	pow@sign,w,c
  1184  000B2E  B4D8               	btfsc	status,2,c
  1185  000B30  D00F               	goto	l523
  1186  000B32  C044  F001         	movff	pow@x,___ftneg@f1
  1187  000B36  C045  F002         	movff	pow@x+1,___ftneg@f1+1
  1188  000B3A  C046  F003         	movff	pow@x+2,___ftneg@f1+2
  1189  000B3E  ECF6  F00B         	call	___ftneg	;wreg free
  1190  000B42  C001  F044         	movff	?___ftneg,?_pow
  1191  000B46  C002  F045         	movff	?___ftneg+1,?_pow+1
  1192  000B4A  C003  F046         	movff	?___ftneg+2,?_pow+2
  1193  000B4E  0012               	return	
  1194  000B50                     l523:
  1195  000B50  C044  F044         	movff	pow@x,?_pow
  1196  000B54  C045  F045         	movff	pow@x+1,?_pow+1
  1197  000B58  C046  F046         	movff	pow@x+2,?_pow+2
  1198  000B5C  0012               	return		;funcret
  1199  000B5E                     __end_of_pow:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           plusw1	equ	0xFE3
  1209                           fsr1l	equ	0xFE1
  1210                           indf2	equ	0xFDF
  1211                           plusw2	equ	0xFDB
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216 ;; *************** function _log *****************
  1217 ;; Defined at:
  1218 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  x               3   51[COMRAM] unsigned char 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  exponent        2   54[COMRAM] int 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  3   51[COMRAM] int 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         3       0       0       0       0       0       0
  1233 ;;      Locals:         2       0       0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0
  1235 ;;      Totals:         5       0       0       0       0       0       0
  1236 ;;Total ram usage:        5 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    3
  1239 ;; This function calls:
  1240 ;;		___awtoft
  1241 ;;		___ftadd
  1242 ;;		___ftmul
  1243 ;;		_eval_poly
  1244 ;;		_frexp
  1245 ;; This function is called by:
  1246 ;;		_pow
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text3
  1251  000DEC                     __ptext3:
  1252                           	opt stack 0
  1253  000DEC                     _log:
  1254                           	opt stack 25
  1255                           
  1256                           ;incstack = 0
  1257  000DEC  AE36               	btfss	log@x+2,7,c
  1258  000DEE  D00B               	goto	l719
  1259  000DF0  0E00               	movlw	0
  1260  000DF2  6E5A               	movwf	_errno+1,c
  1261  000DF4  0E21               	movlw	33
  1262  000DF6  6E59               	movwf	_errno,c
  1263  000DF8  0E00               	movlw	0
  1264  000DFA  6E34               	movwf	?_log,c
  1265  000DFC  0E00               	movlw	0
  1266  000DFE  6E35               	movwf	?_log+1,c
  1267  000E00  0E00               	movlw	0
  1268  000E02  6E36               	movwf	?_log+2,c
  1269  000E04  0012               	return	
  1270  000E06                     l719:
  1271  000E06  5034               	movf	log@x,w,c
  1272  000E08  1035               	iorwf	log@x+1,w,c
  1273  000E0A  1036               	iorwf	log@x+2,w,c
  1274  000E0C  A4D8               	btfss	status,2,c
  1275  000E0E  D00B               	goto	l721
  1276  000E10  0E00               	movlw	0
  1277  000E12  6E5A               	movwf	_errno+1,c
  1278  000E14  0E22               	movlw	34
  1279  000E16  6E59               	movwf	_errno,c
  1280  000E18  0E00               	movlw	0
  1281  000E1A  6E34               	movwf	?_log,c
  1282  000E1C  0E00               	movlw	0
  1283  000E1E  6E35               	movwf	?_log+1,c
  1284  000E20  0E00               	movlw	0
  1285  000E22  6E36               	movwf	?_log+2,c
  1286  000E24  0012               	return	
  1287  000E26                     l721:
  1288  000E26  0E00               	movlw	0
  1289  000E28  6E10               	movwf	___ftmul@f2,c
  1290  000E2A  0E00               	movlw	0
  1291  000E2C  6E11               	movwf	___ftmul@f2+1,c
  1292  000E2E  0E40               	movlw	64
  1293  000E30  6E12               	movwf	___ftmul@f2+2,c
  1294  000E32  0E37               	movlw	low log@exponent
  1295  000E34  6E04               	movwf	frexp@eptr,c
  1296  000E36  0E00               	movlw	high log@exponent
  1297  000E38  6E05               	movwf	frexp@eptr+1,c
  1298  000E3A  C034  F001         	movff	log@x,frexp@value
  1299  000E3E  C035  F002         	movff	log@x+1,frexp@value+1
  1300  000E42  C036  F003         	movff	log@x+2,frexp@value+2
  1301  000E46  EC7A  F00A         	call	_frexp	;wreg free
  1302  000E4A  C001  F00D         	movff	?_frexp,___ftmul@f1
  1303  000E4E  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  1304  000E52  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  1305  000E56  ECFD  F007         	call	___ftmul	;wreg free
  1306  000E5A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  1307  000E5E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  1308  000E62  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  1309  000E66  0E00               	movlw	0
  1310  000E68  6E1F               	movwf	___ftadd@f2,c
  1311  000E6A  0E80               	movlw	128
  1312  000E6C  6E20               	movwf	___ftadd@f2+1,c
  1313  000E6E  0EBF               	movlw	191
  1314  000E70  6E21               	movwf	___ftadd@f2+2,c
  1315  000E72  EC20  F004         	call	___ftadd	;wreg free
  1316  000E76  C01C  F034         	movff	?___ftadd,log@x
  1317  000E7A  C01D  F035         	movff	?___ftadd+1,log@x+1
  1318  000E7E  C01E  F036         	movff	?___ftadd+2,log@x+2
  1319  000E82  0637               	decf	log@exponent,f,c
  1320  000E84  A0D8               	btfss	status,0,c
  1321  000E86  0638               	decf	log@exponent+1,f,c
  1322  000E88  C034  F028         	movff	log@x,eval_poly@x
  1323  000E8C  C035  F029         	movff	log@x+1,eval_poly@x+1
  1324  000E90  C036  F02A         	movff	log@x+2,eval_poly@x+2
  1325  000E94  0E3F               	movlw	low log@coeff
  1326  000E96  6E2B               	movwf	eval_poly@d,c
  1327  000E98  0E06               	movlw	high log@coeff
  1328  000E9A  6E2C               	movwf	eval_poly@d+1,c
  1329  000E9C  0E00               	movlw	0
  1330  000E9E  6E2E               	movwf	eval_poly@n+1,c
  1331  000EA0  0E08               	movlw	8
  1332  000EA2  6E2D               	movwf	eval_poly@n,c
  1333  000EA4  EC59  F009         	call	_eval_poly	;wreg free
  1334  000EA8  C028  F034         	movff	?_eval_poly,log@x
  1335  000EAC  C029  F035         	movff	?_eval_poly+1,log@x+1
  1336  000EB0  C02A  F036         	movff	?_eval_poly+2,log@x+2
  1337  000EB4  0E72               	movlw	114
  1338  000EB6  6E10               	movwf	___ftmul@f2,c
  1339  000EB8  0E31               	movlw	49
  1340  000EBA  6E11               	movwf	___ftmul@f2+1,c
  1341  000EBC  0E3F               	movlw	63
  1342  000EBE  6E12               	movwf	___ftmul@f2+2,c
  1343  000EC0  C037  F009         	movff	log@exponent,___awtoft@c
  1344  000EC4  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  1345  000EC8  ECB3  F00B         	call	___awtoft	;wreg free
  1346  000ECC  C009  F00D         	movff	?___awtoft,___ftmul@f1
  1347  000ED0  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  1348  000ED4  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  1349  000ED8  ECFD  F007         	call	___ftmul	;wreg free
  1350  000EDC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  1351  000EE0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  1352  000EE4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  1353  000EE8  C034  F01F         	movff	log@x,___ftadd@f2
  1354  000EEC  C035  F020         	movff	log@x+1,___ftadd@f2+1
  1355  000EF0  C036  F021         	movff	log@x+2,___ftadd@f2+2
  1356  000EF4  EC20  F004         	call	___ftadd	;wreg free
  1357  000EF8  C01C  F034         	movff	?___ftadd,?_log
  1358  000EFC  C01D  F035         	movff	?___ftadd+1,?_log+1
  1359  000F00  C01E  F036         	movff	?___ftadd+2,?_log+2
  1360  000F04  0012               	return	
  1361  000F06                     __end_of_log:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           plusw1	equ	0xFE3
  1371                           fsr1l	equ	0xFE1
  1372                           indf2	equ	0xFDF
  1373                           plusw2	equ	0xFDB
  1374                           fsr2h	equ	0xFDA
  1375                           fsr2l	equ	0xFD9
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _exp *****************
  1379 ;; Defined at:
  1380 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  x               3   58[COMRAM] int 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  exponent        2   64[COMRAM] int 
  1385 ;;  sign            1   66[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  3   58[COMRAM] unsigned char 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1395 ;;      Params:         3       0       0       0       0       0       0
  1396 ;;      Locals:         6       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0
  1398 ;;      Totals:         9       0       0       0       0       0       0
  1399 ;;Total ram usage:        9 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    3
  1402 ;; This function calls:
  1403 ;;		___awtoft
  1404 ;;		___ftdiv
  1405 ;;		___ftge
  1406 ;;		___ftmul
  1407 ;;		___ftneg
  1408 ;;		___ftsub
  1409 ;;		___fttol
  1410 ;;		_eval_poly
  1411 ;;		_floor
  1412 ;;		_ldexp
  1413 ;; This function is called by:
  1414 ;;		_pow
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text4
  1419  00065C                     __ptext4:
  1420                           	opt stack 0
  1421  00065C                     _exp:
  1422                           	opt stack 25
  1423                           
  1424                           ;incstack = 0
  1425  00065C  503B               	movf	exp@x,w,c
  1426  00065E  103C               	iorwf	exp@x+1,w,c
  1427  000660  103D               	iorwf	exp@x+2,w,c
  1428  000662  A4D8               	btfss	status,2,c
  1429  000664  D007               	goto	l677
  1430  000666  0E00               	movlw	0
  1431  000668  6E3B               	movwf	?_exp,c
  1432  00066A  0E80               	movlw	128
  1433  00066C  6E3C               	movwf	?_exp+1,c
  1434  00066E  0E3F               	movlw	63
  1435  000670  6E3D               	movwf	?_exp+2,c
  1436  000672  0012               	return	
  1437  000674                     l677:
  1438  000674  0E72               	movlw	114
  1439  000676  6E01               	movwf	___ftge@ff1,c
  1440  000678  0E31               	movlw	49
  1441  00067A  6E02               	movwf	___ftge@ff1+1,c
  1442  00067C  0E44               	movlw	68
  1443  00067E  6E03               	movwf	___ftge@ff1+2,c
  1444  000680  C03B  F004         	movff	exp@x,___ftge@ff2
  1445  000684  C03C  F005         	movff	exp@x+1,___ftge@ff2+1
  1446  000688  C03D  F006         	movff	exp@x+2,___ftge@ff2+2
  1447  00068C  ECC2  F00A         	call	___ftge	;wreg free
  1448  000690  B0D8               	btfsc	status,0,c
  1449  000692  D00B               	goto	l679
  1450  000694  0E00               	movlw	0
  1451  000696  6E5A               	movwf	_errno+1,c
  1452  000698  0E22               	movlw	34
  1453  00069A  6E59               	movwf	_errno,c
  1454  00069C  0EFF               	movlw	255
  1455  00069E  6E3B               	movwf	?_exp,c
  1456  0006A0  0E7F               	movlw	127
  1457  0006A2  6E3C               	movwf	?_exp+1,c
  1458  0006A4  0E7F               	movlw	127
  1459  0006A6  6E3D               	movwf	?_exp+2,c
  1460  0006A8  0012               	return	
  1461  0006AA                     l679:
  1462  0006AA  C03B  F001         	movff	exp@x,___ftge@ff1
  1463  0006AE  C03C  F002         	movff	exp@x+1,___ftge@ff1+1
  1464  0006B2  C03D  F003         	movff	exp@x+2,___ftge@ff1+2
  1465  0006B6  0E49               	movlw	73
  1466  0006B8  6E04               	movwf	___ftge@ff2,c
  1467  0006BA  0E3A               	movlw	58
  1468  0006BC  6E05               	movwf	___ftge@ff2+1,c
  1469  0006BE  0EC4               	movlw	196
  1470  0006C0  6E06               	movwf	___ftge@ff2+2,c
  1471  0006C2  ECC2  F00A         	call	___ftge	;wreg free
  1472  0006C6  B0D8               	btfsc	status,0,c
  1473  0006C8  D00B               	goto	l680
  1474  0006CA  0E00               	movlw	0
  1475  0006CC  6E5A               	movwf	_errno+1,c
  1476  0006CE  0E22               	movlw	34
  1477  0006D0  6E59               	movwf	_errno,c
  1478  0006D2  0E00               	movlw	0
  1479  0006D4  6E3B               	movwf	?_exp,c
  1480  0006D6  0E00               	movlw	0
  1481  0006D8  6E3C               	movwf	?_exp+1,c
  1482  0006DA  0E00               	movlw	0
  1483  0006DC  6E3D               	movwf	?_exp+2,c
  1484  0006DE  0012               	return	
  1485  0006E0                     l680:
  1486  0006E0  AE3D               	btfss	exp@x+2,7,c
  1487  0006E2  D002               	goto	u1700
  1488  0006E4  0E01               	movlw	1
  1489  0006E6  D001               	goto	u1710
  1490  0006E8                     u1700:
  1491  0006E8  0E00               	movlw	0
  1492  0006EA                     u1710:
  1493  0006EA  6E43               	movwf	exp@sign,c
  1494  0006EC  5043               	movf	exp@sign,w,c
  1495  0006EE  B4D8               	btfsc	status,2,c
  1496  0006F0  D00E               	goto	l681
  1497  0006F2  C03B  F001         	movff	exp@x,___ftneg@f1
  1498  0006F6  C03C  F002         	movff	exp@x+1,___ftneg@f1+1
  1499  0006FA  C03D  F003         	movff	exp@x+2,___ftneg@f1+2
  1500  0006FE  ECF6  F00B         	call	___ftneg	;wreg free
  1501  000702  C001  F03B         	movff	?___ftneg,exp@x
  1502  000706  C002  F03C         	movff	?___ftneg+1,exp@x+1
  1503  00070A  C003  F03D         	movff	?___ftneg+2,exp@x+2
  1504  00070E                     l681:
  1505  00070E  C03B  F00D         	movff	exp@x,___ftmul@f1
  1506  000712  C03C  F00E         	movff	exp@x+1,___ftmul@f1+1
  1507  000716  C03D  F00F         	movff	exp@x+2,___ftmul@f1+2
  1508  00071A  0EAA               	movlw	170
  1509  00071C  6E10               	movwf	___ftmul@f2,c
  1510  00071E  0EB8               	movlw	184
  1511  000720  6E11               	movwf	___ftmul@f2+1,c
  1512  000722  0E3F               	movlw	63
  1513  000724  6E12               	movwf	___ftmul@f2+2,c
  1514  000726  ECFD  F007         	call	___ftmul	;wreg free
  1515  00072A  C00D  F03B         	movff	?___ftmul,exp@x
  1516  00072E  C00E  F03C         	movff	?___ftmul+1,exp@x+1
  1517  000732  C00F  F03D         	movff	?___ftmul+2,exp@x+2
  1518  000736  C03B  F028         	movff	exp@x,floor@x
  1519  00073A  C03C  F029         	movff	exp@x+1,floor@x+1
  1520  00073E  C03D  F02A         	movff	exp@x+2,floor@x+2
  1521  000742  ECEA  F008         	call	_floor	;wreg free
  1522  000746  C028  F03E         	movff	?_floor,_exp$799
  1523  00074A  C029  F03F         	movff	?_floor+1,_exp$799+1
  1524  00074E  C02A  F040         	movff	?_floor+2,_exp$799+2
  1525  000752  C03E  F00D         	movff	_exp$799,___fttol@f1
  1526  000756  C03F  F00E         	movff	_exp$799+1,___fttol@f1+1
  1527  00075A  C040  F00F         	movff	_exp$799+2,___fttol@f1+2
  1528  00075E  EC83  F007         	call	___fttol	;wreg free
  1529  000762  C00D  F041         	movff	?___fttol,exp@exponent
  1530  000766  C00E  F042         	movff	?___fttol+1,exp@exponent+1
  1531  00076A  C03B  F028         	movff	exp@x,___ftsub@f1
  1532  00076E  C03C  F029         	movff	exp@x+1,___ftsub@f1+1
  1533  000772  C03D  F02A         	movff	exp@x+2,___ftsub@f1+2
  1534  000776  C041  F009         	movff	exp@exponent,___awtoft@c
  1535  00077A  C042  F00A         	movff	exp@exponent+1,___awtoft@c+1
  1536  00077E  ECB3  F00B         	call	___awtoft	;wreg free
  1537  000782  C009  F02B         	movff	?___awtoft,___ftsub@f2
  1538  000786  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  1539  00078A  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  1540  00078E  EC74  F00B         	call	___ftsub	;wreg free
  1541  000792  C028  F03B         	movff	?___ftsub,exp@x
  1542  000796  C029  F03C         	movff	?___ftsub+1,exp@x+1
  1543  00079A  C02A  F03D         	movff	?___ftsub+2,exp@x+2
  1544  00079E  C03B  F028         	movff	exp@x,eval_poly@x
  1545  0007A2  C03C  F029         	movff	exp@x+1,eval_poly@x+1
  1546  0007A6  C03D  F02A         	movff	exp@x+2,eval_poly@x+2
  1547  0007AA  0E21               	movlw	low exp@coeff
  1548  0007AC  6E2B               	movwf	eval_poly@d,c
  1549  0007AE  0E06               	movlw	high exp@coeff
  1550  0007B0  6E2C               	movwf	eval_poly@d+1,c
  1551  0007B2  0E00               	movlw	0
  1552  0007B4  6E2E               	movwf	eval_poly@n+1,c
  1553  0007B6  0E09               	movlw	9
  1554  0007B8  6E2D               	movwf	eval_poly@n,c
  1555  0007BA  EC59  F009         	call	_eval_poly	;wreg free
  1556  0007BE  C028  F034         	movff	?_eval_poly,ldexp@value
  1557  0007C2  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  1558  0007C6  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  1559  0007CA  C041  F037         	movff	exp@exponent,ldexp@newexp
  1560  0007CE  C042  F038         	movff	exp@exponent+1,ldexp@newexp+1
  1561  0007D2  ECC2  F009         	call	_ldexp	;wreg free
  1562  0007D6  C034  F03B         	movff	?_ldexp,exp@x
  1563  0007DA  C035  F03C         	movff	?_ldexp+1,exp@x+1
  1564  0007DE  C036  F03D         	movff	?_ldexp+2,exp@x+2
  1565  0007E2  5043               	movf	exp@sign,w,c
  1566  0007E4  B4D8               	btfsc	status,2,c
  1567  0007E6  D025               	goto	l682
  1568  0007E8  283B               	incf	exp@x,w,c
  1569  0007EA  E10E               	bnz	l1904
  1570  0007EC  0E7F               	movlw	127
  1571  0007EE  183C               	xorwf	exp@x+1,w,c
  1572  0007F0  E10B               	bnz	l1904
  1573  0007F2  0E7F               	movlw	127
  1574  0007F4  183D               	xorwf	exp@x+2,w,c
  1575  0007F6  A4D8               	btfss	status,2,c
  1576  0007F8  D007               	goto	l683
  1577  0007FA  0E00               	movlw	0
  1578  0007FC  6E3B               	movwf	?_exp,c
  1579  0007FE  0E00               	movlw	0
  1580  000800  6E3C               	movwf	?_exp+1,c
  1581  000802  0E00               	movlw	0
  1582  000804  6E3D               	movwf	?_exp+2,c
  1583  000806  0012               	return	
  1584  000808                     l683:
  1585  000808                     l1904:
  1586  000808  0E00               	movlw	0
  1587  00080A  6E09               	movwf	___ftdiv@f1,c
  1588  00080C  0E80               	movlw	128
  1589  00080E  6E0A               	movwf	___ftdiv@f1+1,c
  1590  000810  0E3F               	movlw	63
  1591  000812  6E0B               	movwf	___ftdiv@f1+2,c
  1592  000814  C03B  F00C         	movff	exp@x,___ftdiv@f2
  1593  000818  C03C  F00D         	movff	exp@x+1,___ftdiv@f2+1
  1594  00081C  C03D  F00E         	movff	exp@x+2,___ftdiv@f2+2
  1595  000820  EC77  F008         	call	___ftdiv	;wreg free
  1596  000824  C009  F03B         	movff	?___ftdiv,?_exp
  1597  000828  C00A  F03C         	movff	?___ftdiv+1,?_exp+1
  1598  00082C  C00B  F03D         	movff	?___ftdiv+2,?_exp+2
  1599  000830  0012               	return	
  1600  000832                     l682:
  1601  000832  C03B  F03B         	movff	exp@x,?_exp
  1602  000836  C03C  F03C         	movff	exp@x+1,?_exp+1
  1603  00083A  C03D  F03D         	movff	exp@x+2,?_exp+2
  1604  00083E  0012               	return		;funcret
  1605  000840                     __end_of_exp:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           plusw1	equ	0xFE3
  1615                           fsr1l	equ	0xFE1
  1616                           indf2	equ	0xFDF
  1617                           plusw2	equ	0xFDB
  1618                           fsr2h	equ	0xFDA
  1619                           fsr2l	equ	0xFD9
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _ldexp *****************
  1623 ;; Defined at:
  1624 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  value           3   51[COMRAM] unsigned char 
  1627 ;;  newexp          2   54[COMRAM] int 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  3   51[COMRAM] int 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1639 ;;      Params:         5       0       0       0       0       0       0
  1640 ;;      Locals:         0       0       0       0       0       0       0
  1641 ;;      Temps:          2       0       0       0       0       0       0
  1642 ;;      Totals:         7       0       0       0       0       0       0
  1643 ;;Total ram usage:        7 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_exp
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text5
  1653  001384                     __ptext5:
  1654                           	opt stack 0
  1655  001384                     _ldexp:
  1656                           	opt stack 27
  1657                           
  1658                           ;incstack = 0
  1659  001384  5034               	movf	ldexp@value,w,c
  1660  001386  1035               	iorwf	ldexp@value+1,w,c
  1661  001388  1036               	iorwf	ldexp@value+2,w,c
  1662  00138A  A4D8               	btfss	status,2,c
  1663  00138C  D007               	goto	l701
  1664  00138E  0E00               	movlw	0
  1665  001390  6E34               	movwf	?_ldexp,c
  1666  001392  0E00               	movlw	0
  1667  001394  6E35               	movwf	?_ldexp+1,c
  1668  001396  0E00               	movlw	0
  1669  001398  6E36               	movwf	?_ldexp+2,c
  1670  00139A  0012               	return	
  1671  00139C                     l701:
  1672  00139C  5036               	movf	ldexp@value+2,w,c
  1673  00139E  0B7F               	andlw	127
  1674  0013A0  6E39               	movwf	??_ldexp& (0+255),c
  1675  0013A2  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  1676  0013A4  90D8               	bcf	status,0,c
  1677  0013A6  3639               	rlcf	??_ldexp,f,c
  1678  0013A8  363A               	rlcf	??_ldexp+1,f,c
  1679  0013AA  5039               	movf	??_ldexp,w,c
  1680  0013AC  2637               	addwf	ldexp@newexp,f,c
  1681  0013AE  503A               	movf	??_ldexp+1,w,c
  1682  0013B0  2238               	addwfc	ldexp@newexp+1,f,c
  1683  0013B2  AE35               	btfss	ldexp@value+1,7,c
  1684  0013B4  D003               	goto	u1600
  1685  0013B6  6A39               	clrf	??_ldexp& (0+255),c
  1686  0013B8  2A39               	incf	??_ldexp& (0+255),f,c
  1687  0013BA  D001               	goto	u1608
  1688  0013BC                     u1600:
  1689  0013BC  6A39               	clrf	??_ldexp& (0+255),c
  1690  0013BE                     u1608:
  1691  0013BE  5039               	movf	??_ldexp,w,c
  1692  0013C0  2637               	addwf	ldexp@newexp,f,c
  1693  0013C2  0E00               	movlw	0
  1694  0013C4  2238               	addwfc	ldexp@newexp+1,f,c
  1695  0013C6  AE38               	btfss	ldexp@newexp+1,7,c
  1696  0013C8  D00B               	goto	l703
  1697  0013CA  0E00               	movlw	0
  1698  0013CC  6E5A               	movwf	_errno+1,c
  1699  0013CE  0E22               	movlw	34
  1700  0013D0  6E59               	movwf	_errno,c
  1701  0013D2  0E00               	movlw	0
  1702  0013D4  6E34               	movwf	?_ldexp,c
  1703  0013D6  0E00               	movlw	0
  1704  0013D8  6E35               	movwf	?_ldexp+1,c
  1705  0013DA  0E00               	movlw	0
  1706  0013DC                     L2:
  1707  0013DC  6E36               	movwf	?_ldexp+2,c
  1708  0013DE  0012               	return	
  1709  0013E0                     l703:
  1710  0013E0  BE38               	btfsc	ldexp@newexp+1,7,c
  1711  0013E2  D015               	goto	l705
  1712  0013E4  0438               	decf	ldexp@newexp+1,w,c
  1713  0013E6  A0D8               	btfss	status,0,c
  1714  0013E8  D012               	goto	l705
  1715  0013EA  0E00               	movlw	0
  1716  0013EC  6E5A               	movwf	_errno+1,c
  1717  0013EE  0E22               	movlw	34
  1718  0013F0  6E59               	movwf	_errno,c
  1719  0013F2  AE36               	btfss	ldexp@value+2,7,c
  1720  0013F4  D006               	goto	l706
  1721  0013F6  0EFF               	movlw	255
  1722  0013F8  6E34               	movwf	?_ldexp,c
  1723  0013FA  0E7F               	movlw	127
  1724  0013FC  6E35               	movwf	?_ldexp+1,c
  1725  0013FE  0EFF               	movlw	255
  1726  001400  D7ED               	goto	L2
  1727  001402                     l706:
  1728  001402  0EFF               	movlw	255
  1729  001404  6E34               	movwf	?_ldexp,c
  1730  001406  0E7F               	movlw	127
  1731  001408  6E35               	movwf	?_ldexp+1,c
  1732  00140A  0E7F               	movlw	127
  1733  00140C  D7E7               	goto	L2
  1734  00140E                     l705:
  1735  00140E  3438               	rlcf	ldexp@newexp+1,w,c
  1736  001410  3038               	rrcf	ldexp@newexp+1,w,c
  1737  001412  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  1738  001414  3037               	rrcf	ldexp@newexp,w,c
  1739  001416  6E39               	movwf	??_ldexp& (0+255),c
  1740  001418  5036               	movf	ldexp@value+2,w,c
  1741  00141A  1839               	xorwf	??_ldexp,w,c
  1742  00141C  0B80               	andlw	-128
  1743  00141E  1839               	xorwf	??_ldexp,w,c
  1744  001420  6E36               	movwf	ldexp@value+2,c
  1745  001422  C037  F039         	movff	ldexp@newexp,??_ldexp
  1746  001426  0E01               	movlw	1
  1747  001428  1639               	andwf	??_ldexp,f,c
  1748  00142A  3239               	rrcf	??_ldexp,f,c
  1749  00142C  3239               	rrcf	??_ldexp,f,c
  1750  00142E  5035               	movf	ldexp@value+1,w,c
  1751  001430  1839               	xorwf	??_ldexp,w,c
  1752  001432  0B7F               	andlw	-129
  1753  001434  1839               	xorwf	??_ldexp,w,c
  1754  001436  6E35               	movwf	ldexp@value+1,c
  1755  001438  C034  F034         	movff	ldexp@value,?_ldexp
  1756  00143C  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  1757  001440  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  1758  001444  0012               	return	
  1759  001446                     __end_of_ldexp:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           plusw1	equ	0xFE3
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           plusw2	equ	0xFDB
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _floor *****************
  1777 ;; Defined at:
  1778 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  x               3   39[COMRAM] int 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  i               3   42[COMRAM] int 
  1783 ;;  expon           2   45[COMRAM] int 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  3   39[COMRAM] int 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1793 ;;      Params:         3       0       0       0       0       0       0
  1794 ;;      Locals:         5       0       0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0
  1796 ;;      Totals:         8       0       0       0       0       0       0
  1797 ;;Total ram usage:        8 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    2
  1800 ;; This function calls:
  1801 ;;		___altoft
  1802 ;;		___ftadd
  1803 ;;		___ftge
  1804 ;;		___fttol
  1805 ;;		_frexp
  1806 ;; This function is called by:
  1807 ;;		_exp
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text6
  1812  0011D4                     __ptext6:
  1813                           	opt stack 0
  1814  0011D4                     _floor:
  1815                           	opt stack 25
  1816                           
  1817                           ;incstack = 0
  1818  0011D4  C028  F001         	movff	floor@x,frexp@value
  1819  0011D8  C029  F002         	movff	floor@x+1,frexp@value+1
  1820  0011DC  C02A  F003         	movff	floor@x+2,frexp@value+2
  1821  0011E0  0E2E               	movlw	low floor@expon
  1822  0011E2  6E04               	movwf	frexp@eptr,c
  1823  0011E4  0E00               	movlw	high floor@expon
  1824  0011E6  6E05               	movwf	frexp@eptr+1,c
  1825  0011E8  EC7A  F00A         	call	_frexp	;wreg free
  1826  0011EC  AE2F               	btfss	floor@expon+1,7,c
  1827  0011EE  D010               	goto	l688
  1828  0011F0  AE2A               	btfss	floor@x+2,7,c
  1829  0011F2  D007               	goto	l689
  1830  0011F4  0E00               	movlw	0
  1831  0011F6  6E28               	movwf	?_floor,c
  1832  0011F8  0E80               	movlw	128
  1833  0011FA  6E29               	movwf	?_floor+1,c
  1834  0011FC  0EBF               	movlw	191
  1835  0011FE  6E2A               	movwf	?_floor+2,c
  1836  001200  0012               	return	
  1837  001202                     l689:
  1838  001202  0E00               	movlw	0
  1839  001204  6E28               	movwf	?_floor,c
  1840  001206  0E00               	movlw	0
  1841  001208  6E29               	movwf	?_floor+1,c
  1842  00120A  0E00               	movlw	0
  1843  00120C  6E2A               	movwf	?_floor+2,c
  1844  00120E  0012               	return	
  1845  001210                     l688:
  1846  001210  502F               	movf	floor@expon+1,w,c
  1847  001212  E104               	bnz	u1560
  1848  001214  0E15               	movlw	21
  1849  001216  5C2E               	subwf	floor@expon,w,c
  1850  001218  A0D8               	btfss	status,0,c
  1851  00121A  D007               	goto	l691
  1852  00121C                     u1560:
  1853  00121C  C028  F028         	movff	floor@x,?_floor
  1854  001220  C029  F029         	movff	floor@x+1,?_floor+1
  1855  001224  C02A  F02A         	movff	floor@x+2,?_floor+2
  1856  001228  0012               	return	
  1857  00122A                     l691:
  1858  00122A  C028  F00D         	movff	floor@x,___fttol@f1
  1859  00122E  C029  F00E         	movff	floor@x+1,___fttol@f1+1
  1860  001232  C02A  F00F         	movff	floor@x+2,___fttol@f1+2
  1861  001236  EC83  F007         	call	___fttol	;wreg free
  1862  00123A  C00D  F01C         	movff	?___fttol,___altoft@c
  1863  00123E  C00E  F01D         	movff	?___fttol+1,___altoft@c+1
  1864  001242  C00F  F01E         	movff	?___fttol+2,___altoft@c+2
  1865  001246  C010  F01F         	movff	?___fttol+3,___altoft@c+3
  1866  00124A  EC0A  F00B         	call	___altoft	;wreg free
  1867  00124E  C01C  F02B         	movff	?___altoft,floor@i
  1868  001252  C01D  F02C         	movff	?___altoft+1,floor@i+1
  1869  001256  C01E  F02D         	movff	?___altoft+2,floor@i+2
  1870  00125A  C028  F001         	movff	floor@x,___ftge@ff1
  1871  00125E  C029  F002         	movff	floor@x+1,___ftge@ff1+1
  1872  001262  C02A  F003         	movff	floor@x+2,___ftge@ff1+2
  1873  001266  C02B  F004         	movff	floor@i,___ftge@ff2
  1874  00126A  C02C  F005         	movff	floor@i+1,___ftge@ff2+1
  1875  00126E  C02D  F006         	movff	floor@i+2,___ftge@ff2+2
  1876  001272  ECC2  F00A         	call	___ftge	;wreg free
  1877  001276  B0D8               	btfsc	status,0,c
  1878  001278  D015               	goto	l692
  1879  00127A  C02B  F01C         	movff	floor@i,___ftadd@f1
  1880  00127E  C02C  F01D         	movff	floor@i+1,___ftadd@f1+1
  1881  001282  C02D  F01E         	movff	floor@i+2,___ftadd@f1+2
  1882  001286  0E00               	movlw	0
  1883  001288  6E1F               	movwf	___ftadd@f2,c
  1884  00128A  0E80               	movlw	128
  1885  00128C  6E20               	movwf	___ftadd@f2+1,c
  1886  00128E  0EBF               	movlw	191
  1887  001290  6E21               	movwf	___ftadd@f2+2,c
  1888  001292  EC20  F004         	call	___ftadd	;wreg free
  1889  001296  C01C  F028         	movff	?___ftadd,?_floor
  1890  00129A  C01D  F029         	movff	?___ftadd+1,?_floor+1
  1891  00129E  C01E  F02A         	movff	?___ftadd+2,?_floor+2
  1892  0012A2  0012               	return	
  1893  0012A4                     l692:
  1894  0012A4  C02B  F028         	movff	floor@i,?_floor
  1895  0012A8  C02C  F029         	movff	floor@i+1,?_floor+1
  1896  0012AC  C02D  F02A         	movff	floor@i+2,?_floor+2
  1897  0012B0  0012               	return		;funcret
  1898  0012B2                     __end_of_floor:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           plusw1	equ	0xFE3
  1908                           fsr1l	equ	0xFE1
  1909                           indf2	equ	0xFDF
  1910                           plusw2	equ	0xFDB
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _frexp *****************
  1916 ;; Defined at:
  1917 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  value           3    0[COMRAM] int 
  1920 ;;  eptr            2    3[COMRAM] PTR int 
  1921 ;;		 -> log@exponent(2), floor@expon(2), 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  3    0[COMRAM] PTR int 
  1926 ;; Registers used:
  1927 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1933 ;;      Params:         5       0       0       0       0       0       0
  1934 ;;      Locals:         0       0       0       0       0       0       0
  1935 ;;      Temps:          2       0       0       0       0       0       0
  1936 ;;      Totals:         7       0       0       0       0       0       0
  1937 ;;Total ram usage:        7 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_floor
  1943 ;;		_log
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text7
  1948  0014F4                     __ptext7:
  1949                           	opt stack 0
  1950  0014F4                     _frexp:
  1951                           	opt stack 27
  1952                           
  1953                           ;incstack = 0
  1954  0014F4  5001               	movf	frexp@value,w,c
  1955  0014F6  1002               	iorwf	frexp@value+1,w,c
  1956  0014F8  1003               	iorwf	frexp@value+2,w,c
  1957  0014FA  A4D8               	btfss	status,2,c
  1958  0014FC  D00F               	goto	l697
  1959  0014FE  C004  FFD9         	movff	frexp@eptr,fsr2l
  1960  001502  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1961  001506  0E00               	movlw	0
  1962  001508  6EDE               	movwf	postinc2,c
  1963  00150A  0E00               	movlw	0
  1964  00150C  6EDD               	movwf	postdec2,c
  1965  00150E  0E00               	movlw	0
  1966  001510  6E01               	movwf	?_frexp,c
  1967  001512  0E00               	movlw	0
  1968  001514  6E02               	movwf	?_frexp+1,c
  1969  001516  0E00               	movlw	0
  1970  001518  6E03               	movwf	?_frexp+2,c
  1971  00151A  0012               	return	
  1972  00151C                     l697:
  1973  00151C  5003               	movf	frexp@value+2,w,c
  1974  00151E  0B7F               	andlw	127
  1975  001520  6E06               	movwf	??_frexp& (0+255),c
  1976  001522  6A07               	clrf	(??_frexp+1)& (0+255),c
  1977  001524  90D8               	bcf	status,0,c
  1978  001526  3606               	rlcf	??_frexp,f,c
  1979  001528  3607               	rlcf	??_frexp+1,f,c
  1980  00152A  C004  FFD9         	movff	frexp@eptr,fsr2l
  1981  00152E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1982  001532  C006  FFDE         	movff	??_frexp,postinc2
  1983  001536  C007  FFDD         	movff	??_frexp+1,postdec2
  1984  00153A  AE02               	btfss	frexp@value+1,7,c
  1985  00153C  D003               	goto	u1450
  1986  00153E  6A06               	clrf	??_frexp& (0+255),c
  1987  001540  2A06               	incf	??_frexp& (0+255),f,c
  1988  001542  D001               	goto	u1458
  1989  001544                     u1450:
  1990  001544  6A06               	clrf	??_frexp& (0+255),c
  1991  001546                     u1458:
  1992  001546  5006               	movf	??_frexp,w,c
  1993  001548  C004  FFD9         	movff	frexp@eptr,fsr2l
  1994  00154C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1995  001550  12DE               	iorwf	postinc2,f,c
  1996  001552  0E00               	movlw	0
  1997  001554  12DD               	iorwf	postdec2,f,c
  1998  001556  C004  FFD9         	movff	frexp@eptr,fsr2l
  1999  00155A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2000  00155E  0E82               	movlw	130
  2001  001560  26DE               	addwf	postinc2,f,c
  2002  001562  0EFF               	movlw	255
  2003  001564  22DD               	addwfc	postdec2,f,c
  2004  001566  8003               	bsf	frexp@value+2,0,c
  2005  001568  8203               	bsf	frexp@value+2,1,c
  2006  00156A  8403               	bsf	frexp@value+2,2,c
  2007  00156C  8603               	bsf	frexp@value+2,3,c
  2008  00156E  8803               	bsf	frexp@value+2,4,c
  2009  001570  8A03               	bsf	frexp@value+2,5,c
  2010  001572  9C03               	bcf	frexp@value+2,6,c
  2011  001574  9E02               	bcf	frexp@value+1,7,c
  2012  001576  C001  F001         	movff	frexp@value,?_frexp
  2013  00157A  C002  F002         	movff	frexp@value+1,?_frexp+1
  2014  00157E  C003  F003         	movff	frexp@value+2,?_frexp+2
  2015  001582  0012               	return	
  2016  001584                     __end_of_frexp:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           tblptrl	equ	0xFF6
  2021                           tablat	equ	0xFF5
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           postdec1	equ	0xFE5
  2025                           plusw1	equ	0xFE3
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           postinc2	equ	0xFDE
  2029                           postdec2	equ	0xFDD
  2030                           plusw2	equ	0xFDB
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function ___fttol *****************
  2036 ;; Defined at:
  2037 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  f1              3   12[COMRAM] float 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  lval            4   22[COMRAM] unsigned long 
  2042 ;;  exp1            1   26[COMRAM] unsigned char 
  2043 ;;  sign1           1   21[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  4   12[COMRAM] long 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2, status,0
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2053 ;;      Params:         4       0       0       0       0       0       0
  2054 ;;      Locals:         6       0       0       0       0       0       0
  2055 ;;      Temps:          5       0       0       0       0       0       0
  2056 ;;      Totals:        15       0       0       0       0       0       0
  2057 ;;Total ram usage:       15 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_key_board
  2063 ;;		_pow
  2064 ;;		_exp
  2065 ;;		_floor
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text8
  2070  000F06                     __ptext8:
  2071                           	opt stack 0
  2072  000F06                     ___fttol:
  2073                           	opt stack 26
  2074                           
  2075                           ;incstack = 0
  2076  000F06  C00F  F011         	movff	___fttol@f1+2,??___fttol
  2077  000F0A  6A12               	clrf	(??___fttol+1)& (0+255),c
  2078  000F0C  6A13               	clrf	(??___fttol+2)& (0+255),c
  2079  000F0E  340E               	rlcf	___fttol@f1+1,w,c
  2080  000F10  3611               	rlcf	??___fttol& (0+255),f,c
  2081  000F12  E301               	bnc	u1361
  2082  000F14  8012               	bsf	(??___fttol+1)& (0+255),0,c
  2083  000F16                     u1361:
  2084  000F16  5011               	movf	??___fttol,w,c
  2085  000F18  6E1B               	movwf	___fttol@exp1,c
  2086  000F1A  501B               	movf	___fttol@exp1,w,c
  2087  000F1C  A4D8               	btfss	status,2,c
  2088  000F1E  D009               	goto	l398
  2089  000F20  0E00               	movlw	0
  2090  000F22  6E0D               	movwf	?___fttol,c
  2091  000F24  0E00               	movlw	0
  2092  000F26  6E0E               	movwf	?___fttol+1,c
  2093  000F28  0E00               	movlw	0
  2094  000F2A  6E0F               	movwf	?___fttol+2,c
  2095  000F2C  0E00               	movlw	0
  2096  000F2E  6E10               	movwf	?___fttol+3,c
  2097  000F30  0012               	return	
  2098  000F32                     l398:
  2099  000F32  0E17               	movlw	23
  2100  000F34  6E11               	movwf	??___fttol& (0+255),c
  2101  000F36  C00D  F012         	movff	___fttol@f1,??___fttol+1
  2102  000F3A  C00E  F013         	movff	___fttol@f1+1,??___fttol+2
  2103  000F3E  C00F  F014         	movff	___fttol@f1+2,??___fttol+3
  2104  000F42  2811               	incf	??___fttol,w,c
  2105  000F44  6E15               	movwf	(??___fttol+4)& (0+255),c
  2106  000F46  D004               	goto	u1380
  2107  000F48                     u1385:
  2108  000F48  90D8               	bcf	status,0,c
  2109  000F4A  3214               	rrcf	??___fttol+3,f,c
  2110  000F4C  3213               	rrcf	??___fttol+2,f,c
  2111  000F4E  3212               	rrcf	??___fttol+1,f,c
  2112  000F50                     u1380:
  2113  000F50  2E15               	decfsz	(??___fttol+4)& (0+255),f,c
  2114  000F52  D7FA               	goto	u1385
  2115  000F54  5012               	movf	??___fttol+1,w,c
  2116  000F56  6E16               	movwf	___fttol@sign1,c
  2117  000F58  8E0E               	bsf	___fttol@f1+1,7,c
  2118  000F5A  0EFF               	movlw	255
  2119  000F5C  160D               	andwf	___fttol@f1,f,c
  2120  000F5E  0EFF               	movlw	255
  2121  000F60  160E               	andwf	___fttol@f1+1,f,c
  2122  000F62  0E00               	movlw	0
  2123  000F64  160F               	andwf	___fttol@f1+2,f,c
  2124  000F66  500D               	movf	___fttol@f1,w,c
  2125  000F68  6E17               	movwf	___fttol@lval,c
  2126  000F6A  500E               	movf	___fttol@f1+1,w,c
  2127  000F6C  6E18               	movwf	___fttol@lval+1,c
  2128  000F6E  500F               	movf	___fttol@f1+2,w,c
  2129  000F70  6E19               	movwf	___fttol@lval+2,c
  2130  000F72  6A1A               	clrf	___fttol@lval+3,c
  2131  000F74  0E8E               	movlw	142
  2132  000F76  5E1B               	subwf	___fttol@exp1,f,c
  2133  000F78  AE1B               	btfss	___fttol@exp1,7,c
  2134  000F7A  D016               	goto	l400
  2135  000F7C  501B               	movf	___fttol@exp1,w,c
  2136  000F7E  0A80               	xorlw	128
  2137  000F80  0F8F               	addlw	143
  2138  000F82  B0D8               	btfsc	status,0,c
  2139  000F84  D009               	goto	l401
  2140  000F86  0E00               	movlw	0
  2141  000F88  6E0D               	movwf	?___fttol,c
  2142  000F8A  0E00               	movlw	0
  2143  000F8C  6E0E               	movwf	?___fttol+1,c
  2144  000F8E  0E00               	movlw	0
  2145  000F90  6E0F               	movwf	?___fttol+2,c
  2146  000F92  0E00               	movlw	0
  2147  000F94  6E10               	movwf	?___fttol+3,c
  2148  000F96  0012               	return	
  2149  000F98                     l401:
  2150  000F98  90D8               	bcf	status,0,c
  2151  000F9A  321A               	rrcf	___fttol@lval+3,f,c
  2152  000F9C  3219               	rrcf	___fttol@lval+2,f,c
  2153  000F9E  3218               	rrcf	___fttol@lval+1,f,c
  2154  000FA0  3217               	rrcf	___fttol@lval,f,c
  2155  000FA2  3E1B               	incfsz	___fttol@exp1,f,c
  2156  000FA4  D7F9               	goto	l401
  2157  000FA6  D015               	goto	u1420
  2158  000FA8                     l400:
  2159  000FA8  0E17               	movlw	23
  2160  000FAA  641B               	cpfsgt	___fttol@exp1,c
  2161  000FAC  D00F               	goto	l406
  2162  000FAE  0E00               	movlw	0
  2163  000FB0  6E0D               	movwf	?___fttol,c
  2164  000FB2  0E00               	movlw	0
  2165  000FB4  6E0E               	movwf	?___fttol+1,c
  2166  000FB6  0E00               	movlw	0
  2167  000FB8  6E0F               	movwf	?___fttol+2,c
  2168  000FBA  0E00               	movlw	0
  2169  000FBC  6E10               	movwf	?___fttol+3,c
  2170  000FBE  0012               	return	
  2171  000FC0  90D8               	bcf	status,0,c
  2172  000FC2  3617               	rlcf	___fttol@lval,f,c
  2173  000FC4  3618               	rlcf	___fttol@lval+1,f,c
  2174  000FC6  3619               	rlcf	___fttol@lval+2,f,c
  2175  000FC8  361A               	rlcf	___fttol@lval+3,f,c
  2176  000FCA  061B               	decf	___fttol@exp1,f,c
  2177  000FCC                     l406:
  2178  000FCC  501B               	movf	___fttol@exp1,w,c
  2179  000FCE  A4D8               	btfss	status,2,c
  2180  000FD0  D7F7               	goto	l407
  2181  000FD2                     u1420:
  2182  000FD2  5016               	movf	___fttol@sign1,w,c
  2183  000FD4  B4D8               	btfsc	status,2,c
  2184  000FD6  D008               	goto	l409
  2185  000FD8  1E1A               	comf	___fttol@lval+3,f,c
  2186  000FDA  1E19               	comf	___fttol@lval+2,f,c
  2187  000FDC  1E18               	comf	___fttol@lval+1,f,c
  2188  000FDE  6C17               	negf	___fttol@lval,c
  2189  000FE0  0E00               	movlw	0
  2190  000FE2  2218               	addwfc	___fttol@lval+1,f,c
  2191  000FE4  2219               	addwfc	___fttol@lval+2,f,c
  2192  000FE6  221A               	addwfc	___fttol@lval+3,f,c
  2193  000FE8                     l409:
  2194  000FE8  C017  F00D         	movff	___fttol@lval,?___fttol
  2195  000FEC  C018  F00E         	movff	___fttol@lval+1,?___fttol+1
  2196  000FF0  C019  F00F         	movff	___fttol@lval+2,?___fttol+2
  2197  000FF4  C01A  F010         	movff	___fttol@lval+3,?___fttol+3
  2198  000FF8  0012               	return	
  2199  000FFA                     __end_of___fttol:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           postdec1	equ	0xFE5
  2208                           plusw1	equ	0xFE3
  2209                           fsr1l	equ	0xFE1
  2210                           indf2	equ	0xFDF
  2211                           postinc2	equ	0xFDE
  2212                           postdec2	equ	0xFDD
  2213                           plusw2	equ	0xFDB
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function ___ftge *****************
  2219 ;; Defined at:
  2220 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  ff1             3    0[COMRAM] float 
  2223 ;;  ff2             3    3[COMRAM] float 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2235 ;;      Params:         6       0       0       0       0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0
  2237 ;;      Temps:          3       0       0       0       0       0       0
  2238 ;;      Totals:         9       0       0       0       0       0       0
  2239 ;;Total ram usage:        9 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_pow
  2245 ;;		_exp
  2246 ;;		_floor
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text9
  2251  001584                     __ptext9:
  2252                           	opt stack 0
  2253  001584                     ___ftge:
  2254                           	opt stack 26
  2255                           
  2256                           ;incstack = 0
  2257  001584  AE03               	btfss	___ftge@ff1+2,7,c
  2258  001586  D016               	goto	l370
  2259  001588  C001  F007         	movff	___ftge@ff1,??___ftge
  2260  00158C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2261  001590  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2262  001594  1E07               	comf	??___ftge,f,c
  2263  001596  1E08               	comf	??___ftge+1,f,c
  2264  001598  1E09               	comf	??___ftge+2,f,c
  2265  00159A  2A07               	incf	??___ftge,f,c
  2266  00159C  0E00               	movlw	0
  2267  00159E  2208               	addwfc	??___ftge+1,f,c
  2268  0015A0  2209               	addwfc	??___ftge+2,f,c
  2269  0015A2  0E00               	movlw	0
  2270  0015A4  2407               	addwf	??___ftge,w,c
  2271  0015A6  6E01               	movwf	___ftge@ff1,c
  2272  0015A8  0E00               	movlw	0
  2273  0015AA  2008               	addwfc	??___ftge+1,w,c
  2274  0015AC  6E02               	movwf	___ftge@ff1+1,c
  2275  0015AE  0E80               	movlw	128
  2276  0015B0  2009               	addwfc	??___ftge+2,w,c
  2277  0015B2  6E03               	movwf	___ftge@ff1+2,c
  2278  0015B4                     l370:
  2279  0015B4  AE06               	btfss	___ftge@ff2+2,7,c
  2280  0015B6  D016               	goto	l371
  2281  0015B8  C004  F007         	movff	___ftge@ff2,??___ftge
  2282  0015BC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2283  0015C0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2284  0015C4  1E07               	comf	??___ftge,f,c
  2285  0015C6  1E08               	comf	??___ftge+1,f,c
  2286  0015C8  1E09               	comf	??___ftge+2,f,c
  2287  0015CA  2A07               	incf	??___ftge,f,c
  2288  0015CC  0E00               	movlw	0
  2289  0015CE  2208               	addwfc	??___ftge+1,f,c
  2290  0015D0  2209               	addwfc	??___ftge+2,f,c
  2291  0015D2  0E00               	movlw	0
  2292  0015D4  2407               	addwf	??___ftge,w,c
  2293  0015D6  6E04               	movwf	___ftge@ff2,c
  2294  0015D8  0E00               	movlw	0
  2295  0015DA  2008               	addwfc	??___ftge+1,w,c
  2296  0015DC  6E05               	movwf	___ftge@ff2+1,c
  2297  0015DE  0E80               	movlw	128
  2298  0015E0  2009               	addwfc	??___ftge+2,w,c
  2299  0015E2  6E06               	movwf	___ftge@ff2+2,c
  2300  0015E4                     l371:
  2301  0015E4  0E00               	movlw	0
  2302  0015E6  1A01               	xorwf	___ftge@ff1,f,c
  2303  0015E8  0E00               	movlw	0
  2304  0015EA  1A02               	xorwf	___ftge@ff1+1,f,c
  2305  0015EC  0E80               	movlw	128
  2306  0015EE  1A03               	xorwf	___ftge@ff1+2,f,c
  2307  0015F0  0E00               	movlw	0
  2308  0015F2  1A04               	xorwf	___ftge@ff2,f,c
  2309  0015F4  0E00               	movlw	0
  2310  0015F6  1A05               	xorwf	___ftge@ff2+1,f,c
  2311  0015F8  0E80               	movlw	128
  2312  0015FA  1A06               	xorwf	___ftge@ff2+2,f,c
  2313  0015FC  5004               	movf	___ftge@ff2,w,c
  2314  0015FE  5C01               	subwf	___ftge@ff1,w,c
  2315  001600  5005               	movf	___ftge@ff2+1,w,c
  2316  001602  5802               	subwfb	___ftge@ff1+1,w,c
  2317  001604  5006               	movf	___ftge@ff2+2,w,c
  2318  001606  5803               	subwfb	___ftge@ff1+2,w,c
  2319  001608  B0D8               	btfsc	status,0,c
  2320  00160A  D002               	goto	l1432
  2321  00160C  90D8               	bcf	status,0,c
  2322  00160E  0012               	return	
  2323  001610                     l1432:
  2324  001610  80D8               	bsf	status,0,c
  2325  001612  0012               	return	
  2326  001614                     __end_of___ftge:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           plusw1	equ	0xFE3
  2336                           fsr1l	equ	0xFE1
  2337                           indf2	equ	0xFDF
  2338                           postinc2	equ	0xFDE
  2339                           postdec2	equ	0xFDD
  2340                           plusw2	equ	0xFDB
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function ___altoft *****************
  2346 ;; Defined at:
  2347 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  c               4   27[COMRAM] long 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  sign            1   36[COMRAM] unsigned char 
  2352 ;;  exp             1   35[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  3   27[COMRAM] float 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2362 ;;      Params:         4       0       0       0       0       0       0
  2363 ;;      Locals:         2       0       0       0       0       0       0
  2364 ;;      Temps:          4       0       0       0       0       0       0
  2365 ;;      Totals:        10       0       0       0       0       0       0
  2366 ;;Total ram usage:       10 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    1
  2369 ;; This function calls:
  2370 ;;		___ftpack
  2371 ;; This function is called by:
  2372 ;;		_floor
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text10
  2377  001614                     __ptext10:
  2378                           	opt stack 0
  2379  001614                     ___altoft:
  2380                           	opt stack 25
  2381                           
  2382                           ;incstack = 0
  2383  001614  0E00               	movlw	0
  2384  001616  6E25               	movwf	___altoft@sign,c
  2385  001618  0E8E               	movlw	142
  2386  00161A  6E24               	movwf	___altoft@exp,c
  2387  00161C  AE1F               	btfss	___altoft@c+3,7,c
  2388  00161E  D011               	goto	l168
  2389  001620  1E1F               	comf	___altoft@c+3,f,c
  2390  001622  1E1E               	comf	___altoft@c+2,f,c
  2391  001624  1E1D               	comf	___altoft@c+1,f,c
  2392  001626  6C1C               	negf	___altoft@c,c
  2393  001628  0E00               	movlw	0
  2394  00162A  221D               	addwfc	___altoft@c+1,f,c
  2395  00162C  221E               	addwfc	___altoft@c+2,f,c
  2396  00162E  221F               	addwfc	___altoft@c+3,f,c
  2397  001630  0E01               	movlw	1
  2398  001632  6E25               	movwf	___altoft@sign,c
  2399  001634  D006               	goto	l168
  2400  001636  90D8               	bcf	status,0,c
  2401  001638  321F               	rrcf	___altoft@c+3,f,c
  2402  00163A  321E               	rrcf	___altoft@c+2,f,c
  2403  00163C  321D               	rrcf	___altoft@c+1,f,c
  2404  00163E  321C               	rrcf	___altoft@c,f,c
  2405  001640  2A24               	incf	___altoft@exp,f,c
  2406  001642                     l168:
  2407  001642  0E00               	movlw	0
  2408  001644  141C               	andwf	___altoft@c,w,c
  2409  001646  6E20               	movwf	??___altoft& (0+255),c
  2410  001648  0E00               	movlw	0
  2411  00164A  141D               	andwf	___altoft@c+1,w,c
  2412  00164C  6E21               	movwf	(??___altoft+1)& (0+255),c
  2413  00164E  0E00               	movlw	0
  2414  001650  141E               	andwf	___altoft@c+2,w,c
  2415  001652  6E22               	movwf	(??___altoft+2)& (0+255),c
  2416  001654  0EFF               	movlw	255
  2417  001656  141F               	andwf	___altoft@c+3,w,c
  2418  001658  6E23               	movwf	(??___altoft+3)& (0+255),c
  2419  00165A  5020               	movf	??___altoft,w,c
  2420  00165C  1021               	iorwf	??___altoft+1,w,c
  2421  00165E  1022               	iorwf	??___altoft+2,w,c
  2422  001660  1023               	iorwf	??___altoft+3,w,c
  2423  001662  A4D8               	btfss	status,2,c
  2424  001664  D7E8               	goto	l169
  2425  001666  C01C  F001         	movff	___altoft@c,___ftpack@arg
  2426  00166A  C01D  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2427  00166E  C01E  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2428  001672  C024  F004         	movff	___altoft@exp,___ftpack@exp
  2429  001676  C025  F005         	movff	___altoft@sign,___ftpack@sign
  2430  00167A  EC23  F00A         	call	___ftpack	;wreg free
  2431  00167E  C001  F01C         	movff	?___ftpack,?___altoft
  2432  001682  C002  F01D         	movff	?___ftpack+1,?___altoft+1
  2433  001686  C003  F01E         	movff	?___ftpack+2,?___altoft+2
  2434  00168A  0012               	return	
  2435  00168C                     __end_of___altoft:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           plusw1	equ	0xFE3
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           plusw2	equ	0xFDB
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _eval_poly *****************
  2455 ;; Defined at:
  2456 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  x               3   39[COMRAM] float 
  2459 ;;  d               2   42[COMRAM] PTR const 
  2460 ;;		 -> log@coeff(27), exp@coeff(30), 
  2461 ;;  n               2   44[COMRAM] int 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  res             3   48[COMRAM] int 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  3   39[COMRAM] int 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2473 ;;      Params:         7       0       0       0       0       0       0
  2474 ;;      Locals:         3       0       0       0       0       0       0
  2475 ;;      Temps:          2       0       0       0       0       0       0
  2476 ;;      Totals:        12       0       0       0       0       0       0
  2477 ;;Total ram usage:       12 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    2
  2480 ;; This function calls:
  2481 ;;		___ftadd
  2482 ;;		___ftmul
  2483 ;;		___wmul
  2484 ;; This function is called by:
  2485 ;;		_exp
  2486 ;;		_log
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text11
  2491  0012B2                     __ptext11:
  2492                           	opt stack 0
  2493  0012B2                     _eval_poly:
  2494                           	opt stack 25
  2495                           
  2496                           ;incstack = 0
  2497  0012B2  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  2498  0012B6  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  2499  0012BA  0E00               	movlw	0
  2500  0012BC  6E04               	movwf	___wmul@multiplicand+1,c
  2501  0012BE  0E03               	movlw	3
  2502  0012C0  6E03               	movwf	___wmul@multiplicand,c
  2503  0012C2  ECE3  F00B         	call	___wmul	;wreg free
  2504  0012C6  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  2505  0012CA  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  2506  0012CE  5001               	movf	?___wmul,w,c
  2507  0012D0  262F               	addwf	??_eval_poly,f,c
  2508  0012D2  5002               	movf	?___wmul+1,w,c
  2509  0012D4  2230               	addwfc	??_eval_poly+1,f,c
  2510  0012D6  C02F  FFF6         	movff	??_eval_poly,tblptrl
  2511  0012DA  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  2512  0012DE                     	if	0	;tblptru may be non-zero
  2513  0012DE                     	endif
  2514  0012DE                     	if	0	;tblptru may be non-zero
  2515  0012DE                     	endif
  2516  0012DE  0009               	tblrd		*+
  2517  0012E0  CFF5 F031          	movff	tablat,eval_poly@res
  2518  0012E4  0009               	tblrd		*+
  2519  0012E6  CFF5 F032          	movff	tablat,eval_poly@res+1
  2520  0012EA  000A               	tblrd		*-
  2521  0012EC  CFF5 F033          	movff	tablat,eval_poly@res+2
  2522  0012F0  D03E               	goto	l727
  2523  0012F2  C031  F010         	movff	eval_poly@res,___ftmul@f2
  2524  0012F6  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  2525  0012FA  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  2526  0012FE  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  2527  001302  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  2528  001306  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  2529  00130A  ECFD  F007         	call	___ftmul	;wreg free
  2530  00130E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  2531  001312  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  2532  001316  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  2533  00131A  0E00               	movlw	0
  2534  00131C  6E04               	movwf	___wmul@multiplicand+1,c
  2535  00131E  0E03               	movlw	3
  2536  001320  6E03               	movwf	___wmul@multiplicand,c
  2537  001322  062D               	decf	eval_poly@n,f,c
  2538  001324  A0D8               	btfss	status,0,c
  2539  001326  062E               	decf	eval_poly@n+1,f,c
  2540  001328  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  2541  00132C  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  2542  001330  ECE3  F00B         	call	___wmul	;wreg free
  2543  001334  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  2544  001338  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  2545  00133C  5001               	movf	?___wmul,w,c
  2546  00133E  262F               	addwf	??_eval_poly,f,c
  2547  001340  5002               	movf	?___wmul+1,w,c
  2548  001342  2230               	addwfc	??_eval_poly+1,f,c
  2549  001344  C02F  FFF6         	movff	??_eval_poly,tblptrl
  2550  001348  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  2551  00134C                     	if	0	;tblptru may be non-zero
  2552  00134C                     	endif
  2553  00134C                     	if	0	;tblptru may be non-zero
  2554  00134C                     	endif
  2555  00134C  0009               	tblrd		*+
  2556  00134E  CFF5 F01F          	movff	tablat,___ftadd@f2
  2557  001352  0009               	tblrd		*+
  2558  001354  CFF5 F020          	movff	tablat,___ftadd@f2+1
  2559  001358  000A               	tblrd		*-
  2560  00135A  CFF5 F021          	movff	tablat,___ftadd@f2+2
  2561  00135E  EC20  F004         	call	___ftadd	;wreg free
  2562  001362  C01C  F031         	movff	?___ftadd,eval_poly@res
  2563  001366  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  2564  00136A  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  2565  00136E                     l727:
  2566  00136E  502D               	movf	eval_poly@n,w,c
  2567  001370  102E               	iorwf	eval_poly@n+1,w,c
  2568  001372  A4D8               	btfss	status,2,c
  2569  001374  D7BE               	goto	l728
  2570  001376  C031  F028         	movff	eval_poly@res,?_eval_poly
  2571  00137A  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  2572  00137E  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  2573  001382  0012               	return		;funcret
  2574  001384                     __end_of_eval_poly:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postdec1	equ	0xFE5
  2583                           plusw1	equ	0xFE3
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           plusw2	equ	0xFDB
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function ___wmul *****************
  2594 ;; Defined at:
  2595 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  multiplier      2    0[COMRAM] unsigned int 
  2598 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  product         2    4[COMRAM] unsigned int 
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  2    0[COMRAM] unsigned int 
  2603 ;; Registers used:
  2604 ;;		wreg, status,2, status,0, prodl, prodh
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2610 ;;      Params:         4       0       0       0       0       0       0
  2611 ;;      Locals:         2       0       0       0       0       0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0
  2613 ;;      Totals:         6       0       0       0       0       0       0
  2614 ;;Total ram usage:        6 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_eval_poly
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text12
  2624  0017C6                     __ptext12:
  2625                           	opt stack 0
  2626  0017C6                     ___wmul:
  2627                           	opt stack 26
  2628                           
  2629                           ;incstack = 0
  2630  0017C6  5001               	movf	___wmul@multiplier,w,c
  2631  0017C8  0203               	mulwf	___wmul@multiplicand,c
  2632  0017CA  CFF3 F005          	movff	prodl,___wmul@product
  2633  0017CE  CFF4 F006          	movff	prodh,___wmul@product+1
  2634  0017D2  5001               	movf	___wmul@multiplier,w,c
  2635  0017D4  0204               	mulwf	___wmul@multiplicand+1,c
  2636  0017D6  50F3               	movf	prodl,w,c
  2637  0017D8  2606               	addwf	___wmul@product+1,f,c
  2638  0017DA  5002               	movf	___wmul@multiplier+1,w,c
  2639  0017DC  0203               	mulwf	___wmul@multiplicand,c
  2640  0017DE  50F3               	movf	prodl,w,c
  2641  0017E0  2606               	addwf	___wmul@product+1,f,c
  2642  0017E2  C005  F001         	movff	___wmul@product,?___wmul
  2643  0017E6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2644  0017EA  0012               	return	
  2645  0017EC                     __end_of___wmul:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           prodh	equ	0xFF4
  2652                           prodl	equ	0xFF3
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postdec1	equ	0xFE5
  2656                           plusw1	equ	0xFE3
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           plusw2	equ	0xFDB
  2662                           fsr2h	equ	0xFDA
  2663                           fsr2l	equ	0xFD9
  2664                           status	equ	0xFD8
  2665                           
  2666 ;; *************** function ___ftmul *****************
  2667 ;; Defined at:
  2668 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  f1              3   12[COMRAM] float 
  2671 ;;  f2              3   15[COMRAM] float 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  2674 ;;  sign            1   26[COMRAM] unsigned char 
  2675 ;;  cntr            1   25[COMRAM] unsigned char 
  2676 ;;  exp             1   21[COMRAM] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  3   12[COMRAM] float 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         6       0       0       0       0       0       0
  2687 ;;      Locals:         6       0       0       0       0       0       0
  2688 ;;      Temps:          3       0       0       0       0       0       0
  2689 ;;      Totals:        15       0       0       0       0       0       0
  2690 ;;Total ram usage:       15 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    1
  2693 ;; This function calls:
  2694 ;;		___ftpack
  2695 ;; This function is called by:
  2696 ;;		_pow
  2697 ;;		_exp
  2698 ;;		_log
  2699 ;;		_eval_poly
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text13
  2704  000FFA                     __ptext13:
  2705                           	opt stack 0
  2706  000FFA                     ___ftmul:
  2707                           	opt stack 25
  2708                           
  2709                           ;incstack = 0
  2710  000FFA  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  2711  000FFE  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2712  001000  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2713  001002  340E               	rlcf	___ftmul@f1+1,w,c
  2714  001004  3613               	rlcf	??___ftmul& (0+255),f,c
  2715  001006  E301               	bnc	u1271
  2716  001008  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2717  00100A                     u1271:
  2718  00100A  5013               	movf	??___ftmul,w,c
  2719  00100C  6E16               	movwf	___ftmul@exp,c
  2720  00100E  5016               	movf	___ftmul@exp,w,c
  2721  001010  A4D8               	btfss	status,2,c
  2722  001012  D007               	goto	l377
  2723  001014  0E00               	movlw	0
  2724  001016  6E0D               	movwf	?___ftmul,c
  2725  001018  0E00               	movlw	0
  2726  00101A  6E0E               	movwf	?___ftmul+1,c
  2727  00101C  0E00               	movlw	0
  2728  00101E  6E0F               	movwf	?___ftmul+2,c
  2729  001020  0012               	return	
  2730  001022                     l377:
  2731  001022  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  2732  001026  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2733  001028  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2734  00102A  3411               	rlcf	___ftmul@f2+1,w,c
  2735  00102C  3613               	rlcf	??___ftmul& (0+255),f,c
  2736  00102E  E301               	bnc	u1291
  2737  001030  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2738  001032                     u1291:
  2739  001032  5013               	movf	??___ftmul,w,c
  2740  001034  6E1B               	movwf	___ftmul@sign,c
  2741  001036  501B               	movf	___ftmul@sign,w,c
  2742  001038  A4D8               	btfss	status,2,c
  2743  00103A  D007               	goto	l379
  2744  00103C  0E00               	movlw	0
  2745  00103E  6E0D               	movwf	?___ftmul,c
  2746  001040  0E00               	movlw	0
  2747  001042  6E0E               	movwf	?___ftmul+1,c
  2748  001044  0E00               	movlw	0
  2749  001046  6E0F               	movwf	?___ftmul+2,c
  2750  001048  0012               	return	
  2751  00104A                     l379:
  2752  00104A  501B               	movf	___ftmul@sign,w,c
  2753  00104C  0F7B               	addlw	123
  2754  00104E  2616               	addwf	___ftmul@exp,f,c
  2755  001050  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  2756  001054  5012               	movf	___ftmul@f2+2,w,c
  2757  001056  1A1B               	xorwf	___ftmul@sign,f,c
  2758  001058  0E80               	movlw	128
  2759  00105A  161B               	andwf	___ftmul@sign,f,c
  2760  00105C  8E0E               	bsf	___ftmul@f1+1,7,c
  2761  00105E  8E11               	bsf	___ftmul@f2+1,7,c
  2762  001060  0EFF               	movlw	255
  2763  001062  1610               	andwf	___ftmul@f2,f,c
  2764  001064  0EFF               	movlw	255
  2765  001066  1611               	andwf	___ftmul@f2+1,f,c
  2766  001068  0E00               	movlw	0
  2767  00106A  1612               	andwf	___ftmul@f2+2,f,c
  2768  00106C  0E00               	movlw	0
  2769  00106E  6E17               	movwf	___ftmul@f3_as_product,c
  2770  001070  0E00               	movlw	0
  2771  001072  6E18               	movwf	___ftmul@f3_as_product+1,c
  2772  001074  0E00               	movlw	0
  2773  001076  6E19               	movwf	___ftmul@f3_as_product+2,c
  2774  001078  0E07               	movlw	7
  2775  00107A  6E1A               	movwf	___ftmul@cntr,c
  2776  00107C  A00D               	btfss	___ftmul@f1,0,c
  2777  00107E  D006               	goto	l381
  2778  001080  5010               	movf	___ftmul@f2,w,c
  2779  001082  2617               	addwf	___ftmul@f3_as_product,f,c
  2780  001084  5011               	movf	___ftmul@f2+1,w,c
  2781  001086  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  2782  001088  5012               	movf	___ftmul@f2+2,w,c
  2783  00108A  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  2784  00108C                     l381:
  2785  00108C  90D8               	bcf	status,0,c
  2786  00108E  320F               	rrcf	___ftmul@f1+2,f,c
  2787  001090  320E               	rrcf	___ftmul@f1+1,f,c
  2788  001092  320D               	rrcf	___ftmul@f1,f,c
  2789  001094  90D8               	bcf	status,0,c
  2790  001096  3610               	rlcf	___ftmul@f2,f,c
  2791  001098  3611               	rlcf	___ftmul@f2+1,f,c
  2792  00109A  3612               	rlcf	___ftmul@f2+2,f,c
  2793  00109C  2E1A               	decfsz	___ftmul@cntr,f,c
  2794  00109E  D7EE               	goto	l380
  2795  0010A0  0E09               	movlw	9
  2796  0010A2  6E1A               	movwf	___ftmul@cntr,c
  2797  0010A4  A00D               	btfss	___ftmul@f1,0,c
  2798  0010A6  D006               	goto	l384
  2799  0010A8  5010               	movf	___ftmul@f2,w,c
  2800  0010AA  2617               	addwf	___ftmul@f3_as_product,f,c
  2801  0010AC  5011               	movf	___ftmul@f2+1,w,c
  2802  0010AE  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  2803  0010B0  5012               	movf	___ftmul@f2+2,w,c
  2804  0010B2  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  2805  0010B4                     l384:
  2806  0010B4  90D8               	bcf	status,0,c
  2807  0010B6  320F               	rrcf	___ftmul@f1+2,f,c
  2808  0010B8  320E               	rrcf	___ftmul@f1+1,f,c
  2809  0010BA  320D               	rrcf	___ftmul@f1,f,c
  2810  0010BC  90D8               	bcf	status,0,c
  2811  0010BE  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  2812  0010C0  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  2813  0010C2  3217               	rrcf	___ftmul@f3_as_product,f,c
  2814  0010C4  2E1A               	decfsz	___ftmul@cntr,f,c
  2815  0010C6  D7EE               	goto	l383
  2816  0010C8  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2817  0010CC  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2818  0010D0  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2819  0010D4  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  2820  0010D8  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  2821  0010DC  EC23  F00A         	call	___ftpack	;wreg free
  2822  0010E0  C001  F00D         	movff	?___ftpack,?___ftmul
  2823  0010E4  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  2824  0010E8  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  2825  0010EC  0012               	return	
  2826  0010EE                     __end_of___ftmul:
  2827                           	opt stack 0
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           prodh	equ	0xFF4
  2833                           prodl	equ	0xFF3
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           plusw1	equ	0xFE3
  2838                           fsr1l	equ	0xFE1
  2839                           indf2	equ	0xFDF
  2840                           postinc2	equ	0xFDE
  2841                           postdec2	equ	0xFDD
  2842                           plusw2	equ	0xFDB
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function ___ftsub *****************
  2848 ;; Defined at:
  2849 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  f1              3   39[COMRAM] float 
  2852 ;;  f2              3   42[COMRAM] float 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  3   39[COMRAM] float 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2864 ;;      Params:         6       0       0       0       0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0
  2867 ;;      Totals:         6       0       0       0       0       0       0
  2868 ;;Total ram usage:        6 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    2
  2871 ;; This function calls:
  2872 ;;		___ftadd
  2873 ;; This function is called by:
  2874 ;;		_exp
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text14
  2879  0016E8                     __ptext14:
  2880                           	opt stack 0
  2881  0016E8                     ___ftsub:
  2882                           	opt stack 25
  2883                           
  2884                           ;incstack = 0
  2885  0016E8  502B               	movf	___ftsub@f2,w,c
  2886  0016EA  102C               	iorwf	___ftsub@f2+1,w,c
  2887  0016EC  102D               	iorwf	___ftsub@f2+2,w,c
  2888  0016EE  B4D8               	btfsc	status,2,c
  2889  0016F0  D006               	goto	l394
  2890  0016F2  0E00               	movlw	0
  2891  0016F4  1A2B               	xorwf	___ftsub@f2,f,c
  2892  0016F6  0E00               	movlw	0
  2893  0016F8  1A2C               	xorwf	___ftsub@f2+1,f,c
  2894  0016FA  0E80               	movlw	128
  2895  0016FC  1A2D               	xorwf	___ftsub@f2+2,f,c
  2896  0016FE                     l394:
  2897  0016FE  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  2898  001702  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  2899  001706  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  2900  00170A  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  2901  00170E  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  2902  001712  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  2903  001716  EC20  F004         	call	___ftadd	;wreg free
  2904  00171A  C01C  F028         	movff	?___ftadd,?___ftsub
  2905  00171E  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  2906  001722  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  2907  001726  0012               	return	
  2908  001728                     __end_of___ftsub:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postdec1	equ	0xFE5
  2919                           plusw1	equ	0xFE3
  2920                           fsr1l	equ	0xFE1
  2921                           indf2	equ	0xFDF
  2922                           postinc2	equ	0xFDE
  2923                           postdec2	equ	0xFDD
  2924                           plusw2	equ	0xFDB
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function ___ftadd *****************
  2930 ;; Defined at:
  2931 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  f1              3   27[COMRAM] float 
  2934 ;;  f2              3   30[COMRAM] float 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  exp1            1   38[COMRAM] unsigned char 
  2937 ;;  exp2            1   37[COMRAM] unsigned char 
  2938 ;;  sign            1   36[COMRAM] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  3   27[COMRAM] float 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2948 ;;      Params:         6       0       0       0       0       0       0
  2949 ;;      Locals:         3       0       0       0       0       0       0
  2950 ;;      Temps:          3       0       0       0       0       0       0
  2951 ;;      Totals:        12       0       0       0       0       0       0
  2952 ;;Total ram usage:       12 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		___ftpack
  2957 ;; This function is called by:
  2958 ;;		___ftsub
  2959 ;;		_floor
  2960 ;;		_log
  2961 ;;		_eval_poly
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text15
  2966  000840                     __ptext15:
  2967                           	opt stack 0
  2968  000840                     ___ftadd:
  2969                           	opt stack 25
  2970                           
  2971                           ;incstack = 0
  2972  000840  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  2973  000844  6A23               	clrf	(??___ftadd+1)& (0+255),c
  2974  000846  6A24               	clrf	(??___ftadd+2)& (0+255),c
  2975  000848  341D               	rlcf	___ftadd@f1+1,w,c
  2976  00084A  3622               	rlcf	??___ftadd& (0+255),f,c
  2977  00084C  E301               	bnc	u1061
  2978  00084E  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  2979  000850                     u1061:
  2980  000850  5022               	movf	??___ftadd,w,c
  2981  000852  6E27               	movwf	___ftadd@exp1,c
  2982  000854  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  2983  000858  6A23               	clrf	(??___ftadd+1)& (0+255),c
  2984  00085A  6A24               	clrf	(??___ftadd+2)& (0+255),c
  2985  00085C  3420               	rlcf	___ftadd@f2+1,w,c
  2986  00085E  3622               	rlcf	??___ftadd& (0+255),f,c
  2987  000860  E301               	bnc	u1071
  2988  000862  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  2989  000864                     u1071:
  2990  000864  5022               	movf	??___ftadd,w,c
  2991  000866  6E26               	movwf	___ftadd@exp2,c
  2992  000868  5027               	movf	___ftadd@exp1,w,c
  2993  00086A  B4D8               	btfsc	status,2,c
  2994  00086C  D00B               	goto	u1100
  2995  00086E  5026               	movf	___ftadd@exp2,w,c
  2996  000870  5C27               	subwf	___ftadd@exp1,w,c
  2997  000872  B0D8               	btfsc	status,0,c
  2998  000874  D00E               	goto	l329
  2999  000876  5027               	movf	___ftadd@exp1,w,c
  3000  000878  0800               	sublw	0
  3001  00087A  2426               	addwf	___ftadd@exp2,w,c
  3002  00087C  6E22               	movwf	??___ftadd& (0+255),c
  3003  00087E  0E18               	movlw	24
  3004  000880  6422               	cpfsgt	??___ftadd,c
  3005  000882  D007               	goto	l329
  3006  000884                     u1100:
  3007  000884  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  3008  000888  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  3009  00088C  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  3010  000890  0012               	return	
  3011  000892                     l329:
  3012  000892  5026               	movf	___ftadd@exp2,w,c
  3013  000894  B4D8               	btfsc	status,2,c
  3014  000896  D00B               	goto	u1130
  3015  000898  5027               	movf	___ftadd@exp1,w,c
  3016  00089A  5C26               	subwf	___ftadd@exp2,w,c
  3017  00089C  B0D8               	btfsc	status,0,c
  3018  00089E  D00E               	goto	l333
  3019  0008A0  5026               	movf	___ftadd@exp2,w,c
  3020  0008A2  0800               	sublw	0
  3021  0008A4  2427               	addwf	___ftadd@exp1,w,c
  3022  0008A6  6E22               	movwf	??___ftadd& (0+255),c
  3023  0008A8  0E18               	movlw	24
  3024  0008AA  6422               	cpfsgt	??___ftadd,c
  3025  0008AC  D007               	goto	l333
  3026  0008AE                     u1130:
  3027  0008AE  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  3028  0008B2  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  3029  0008B6  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  3030  0008BA  0012               	return	
  3031  0008BC                     l333:
  3032  0008BC  0E06               	movlw	6
  3033  0008BE  6E25               	movwf	___ftadd@sign,c
  3034  0008C0  BE1E               	btfsc	___ftadd@f1+2,7,c
  3035  0008C2  8E25               	bsf	___ftadd@sign,7,c
  3036  0008C4  BE21               	btfsc	___ftadd@f2+2,7,c
  3037  0008C6  8C25               	bsf	___ftadd@sign,6,c
  3038  0008C8  8E1D               	bsf	___ftadd@f1+1,7,c
  3039  0008CA  0EFF               	movlw	255
  3040  0008CC  161C               	andwf	___ftadd@f1,f,c
  3041  0008CE  0EFF               	movlw	255
  3042  0008D0  161D               	andwf	___ftadd@f1+1,f,c
  3043  0008D2  0E00               	movlw	0
  3044  0008D4  161E               	andwf	___ftadd@f1+2,f,c
  3045  0008D6  8E20               	bsf	___ftadd@f2+1,7,c
  3046  0008D8  0EFF               	movlw	255
  3047  0008DA  161F               	andwf	___ftadd@f2,f,c
  3048  0008DC  0EFF               	movlw	255
  3049  0008DE  1620               	andwf	___ftadd@f2+1,f,c
  3050  0008E0  0E00               	movlw	0
  3051  0008E2  1621               	andwf	___ftadd@f2+2,f,c
  3052  0008E4  5026               	movf	___ftadd@exp2,w,c
  3053  0008E6  5C27               	subwf	___ftadd@exp1,w,c
  3054  0008E8  B0D8               	btfsc	status,0,c
  3055  0008EA  D01B               	goto	l338
  3056  0008EC                     u1160:
  3057  0008EC  90D8               	bcf	status,0,c
  3058  0008EE  361F               	rlcf	___ftadd@f2,f,c
  3059  0008F0  3620               	rlcf	___ftadd@f2+1,f,c
  3060  0008F2  3621               	rlcf	___ftadd@f2+2,f,c
  3061  0008F4  0626               	decf	___ftadd@exp2,f,c
  3062  0008F6  5027               	movf	___ftadd@exp1,w,c
  3063  0008F8  1826               	xorwf	___ftadd@exp2,w,c
  3064  0008FA  B4D8               	btfsc	status,2,c
  3065  0008FC  D00D               	goto	l343
  3066  0008FE  0625               	decf	___ftadd@sign,f,c
  3067  000900  C025  F022         	movff	___ftadd@sign,??___ftadd
  3068  000904  0E07               	movlw	7
  3069  000906  1622               	andwf	??___ftadd,f,c
  3070  000908  B4D8               	btfsc	status,2,c
  3071  00090A  D006               	goto	l343
  3072  00090C  D7EF               	goto	u1160
  3073  00090E  90D8               	bcf	status,0,c
  3074  000910  321E               	rrcf	___ftadd@f1+2,f,c
  3075  000912  321D               	rrcf	___ftadd@f1+1,f,c
  3076  000914  321C               	rrcf	___ftadd@f1,f,c
  3077  000916  2A27               	incf	___ftadd@exp1,f,c
  3078  000918                     l343:
  3079  000918  5026               	movf	___ftadd@exp2,w,c
  3080  00091A  1827               	xorwf	___ftadd@exp1,w,c
  3081  00091C  B4D8               	btfsc	status,2,c
  3082  00091E  D01F               	goto	u1230
  3083  000920  D7F6               	goto	l344
  3084  000922                     l338:
  3085  000922  5027               	movf	___ftadd@exp1,w,c
  3086  000924  5C26               	subwf	___ftadd@exp2,w,c
  3087  000926  B0D8               	btfsc	status,0,c
  3088  000928  D01A               	goto	u1230
  3089  00092A                     u1200:
  3090  00092A  90D8               	bcf	status,0,c
  3091  00092C  361C               	rlcf	___ftadd@f1,f,c
  3092  00092E  361D               	rlcf	___ftadd@f1+1,f,c
  3093  000930  361E               	rlcf	___ftadd@f1+2,f,c
  3094  000932  0627               	decf	___ftadd@exp1,f,c
  3095  000934  5027               	movf	___ftadd@exp1,w,c
  3096  000936  1826               	xorwf	___ftadd@exp2,w,c
  3097  000938  B4D8               	btfsc	status,2,c
  3098  00093A  D00D               	goto	l352
  3099  00093C  0625               	decf	___ftadd@sign,f,c
  3100  00093E  C025  F022         	movff	___ftadd@sign,??___ftadd
  3101  000942  0E07               	movlw	7
  3102  000944  1622               	andwf	??___ftadd,f,c
  3103  000946  B4D8               	btfsc	status,2,c
  3104  000948  D006               	goto	l352
  3105  00094A  D7EF               	goto	u1200
  3106  00094C  90D8               	bcf	status,0,c
  3107  00094E  3221               	rrcf	___ftadd@f2+2,f,c
  3108  000950  3220               	rrcf	___ftadd@f2+1,f,c
  3109  000952  321F               	rrcf	___ftadd@f2,f,c
  3110  000954  2A26               	incf	___ftadd@exp2,f,c
  3111  000956                     l352:
  3112  000956  5026               	movf	___ftadd@exp2,w,c
  3113  000958  1827               	xorwf	___ftadd@exp1,w,c
  3114  00095A  A4D8               	btfss	status,2,c
  3115  00095C  D7F7               	goto	l353
  3116  00095E                     u1230:
  3117  00095E  AE25               	btfss	___ftadd@sign,7,c
  3118  000960  D00C               	goto	l355
  3119  000962  0EFF               	movlw	255
  3120  000964  1A1C               	xorwf	___ftadd@f1,f,c
  3121  000966  0EFF               	movlw	255
  3122  000968  1A1D               	xorwf	___ftadd@f1+1,f,c
  3123  00096A  0EFF               	movlw	255
  3124  00096C  1A1E               	xorwf	___ftadd@f1+2,f,c
  3125  00096E  0E01               	movlw	1
  3126  000970  261C               	addwf	___ftadd@f1,f,c
  3127  000972  0E00               	movlw	0
  3128  000974  221D               	addwfc	___ftadd@f1+1,f,c
  3129  000976  0E00               	movlw	0
  3130  000978  221E               	addwfc	___ftadd@f1+2,f,c
  3131  00097A                     l355:
  3132  00097A  AC25               	btfss	___ftadd@sign,6,c
  3133  00097C  D00C               	goto	l356
  3134  00097E  0EFF               	movlw	255
  3135  000980  1A1F               	xorwf	___ftadd@f2,f,c
  3136  000982  0EFF               	movlw	255
  3137  000984  1A20               	xorwf	___ftadd@f2+1,f,c
  3138  000986  0EFF               	movlw	255
  3139  000988  1A21               	xorwf	___ftadd@f2+2,f,c
  3140  00098A  0E01               	movlw	1
  3141  00098C  261F               	addwf	___ftadd@f2,f,c
  3142  00098E  0E00               	movlw	0
  3143  000990  2220               	addwfc	___ftadd@f2+1,f,c
  3144  000992  0E00               	movlw	0
  3145  000994  2221               	addwfc	___ftadd@f2+2,f,c
  3146  000996                     l356:
  3147  000996  0E00               	movlw	0
  3148  000998  6E25               	movwf	___ftadd@sign,c
  3149  00099A  501C               	movf	___ftadd@f1,w,c
  3150  00099C  261F               	addwf	___ftadd@f2,f,c
  3151  00099E  501D               	movf	___ftadd@f1+1,w,c
  3152  0009A0  2220               	addwfc	___ftadd@f2+1,f,c
  3153  0009A2  501E               	movf	___ftadd@f1+2,w,c
  3154  0009A4  2221               	addwfc	___ftadd@f2+2,f,c
  3155  0009A6  AE21               	btfss	___ftadd@f2+2,7,c
  3156  0009A8  D00E               	goto	l357
  3157  0009AA  0EFF               	movlw	255
  3158  0009AC  1A1F               	xorwf	___ftadd@f2,f,c
  3159  0009AE  0EFF               	movlw	255
  3160  0009B0  1A20               	xorwf	___ftadd@f2+1,f,c
  3161  0009B2  0EFF               	movlw	255
  3162  0009B4  1A21               	xorwf	___ftadd@f2+2,f,c
  3163  0009B6  0E01               	movlw	1
  3164  0009B8  261F               	addwf	___ftadd@f2,f,c
  3165  0009BA  0E00               	movlw	0
  3166  0009BC  2220               	addwfc	___ftadd@f2+1,f,c
  3167  0009BE  0E00               	movlw	0
  3168  0009C0  2221               	addwfc	___ftadd@f2+2,f,c
  3169  0009C2  0E01               	movlw	1
  3170  0009C4  6E25               	movwf	___ftadd@sign,c
  3171  0009C6                     l357:
  3172  0009C6  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  3173  0009CA  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3174  0009CE  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3175  0009D2  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  3176  0009D6  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  3177  0009DA  EC23  F00A         	call	___ftpack	;wreg free
  3178  0009DE  C001  F01C         	movff	?___ftpack,?___ftadd
  3179  0009E2  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  3180  0009E6  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  3181  0009EA  0012               	return	
  3182  0009EC                     __end_of___ftadd:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           plusw1	equ	0xFE3
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           plusw2	equ	0xFDB
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function ___ftneg *****************
  3204 ;; Defined at:
  3205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  f1              3    0[COMRAM] float 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  3    0[COMRAM] float 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3219 ;;      Params:         3       0       0       0       0       0       0
  3220 ;;      Locals:         0       0       0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0
  3222 ;;      Totals:         3       0       0       0       0       0       0
  3223 ;;Total ram usage:        3 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_pow
  3229 ;;		_exp
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text16
  3234  0017EC                     __ptext16:
  3235                           	opt stack 0
  3236  0017EC                     ___ftneg:
  3237                           	opt stack 27
  3238                           
  3239                           ;incstack = 0
  3240  0017EC  5001               	movf	___ftneg@f1,w,c
  3241  0017EE  1002               	iorwf	___ftneg@f1+1,w,c
  3242  0017F0  1003               	iorwf	___ftneg@f1+2,w,c
  3243  0017F2  B4D8               	btfsc	status,2,c
  3244  0017F4  D006               	goto	l388
  3245  0017F6  0E00               	movlw	0
  3246  0017F8  1A01               	xorwf	___ftneg@f1,f,c
  3247  0017FA  0E00               	movlw	0
  3248  0017FC  1A02               	xorwf	___ftneg@f1+1,f,c
  3249  0017FE  0E80               	movlw	128
  3250  001800  1A03               	xorwf	___ftneg@f1+2,f,c
  3251  001802                     l388:
  3252  001802  C001  F001         	movff	___ftneg@f1,?___ftneg
  3253  001806  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3254  00180A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3255  00180E  0012               	return		;funcret
  3256  001810                     __end_of___ftneg:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           plusw1	equ	0xFE3
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           postinc2	equ	0xFDE
  3271                           postdec2	equ	0xFDD
  3272                           plusw2	equ	0xFDB
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           
  3277 ;; *************** function ___ftdiv *****************
  3278 ;; Defined at:
  3279 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  f1              3    8[COMRAM] float 
  3282 ;;  f2              3   11[COMRAM] float 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  f3              3   18[COMRAM] float 
  3285 ;;  sign            1   22[COMRAM] unsigned char 
  3286 ;;  exp             1   21[COMRAM] unsigned char 
  3287 ;;  cntr            1   17[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  3    8[COMRAM] float 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         6       0       0       0       0       0       0
  3298 ;;      Locals:         6       0       0       0       0       0       0
  3299 ;;      Temps:          3       0       0       0       0       0       0
  3300 ;;      Totals:        15       0       0       0       0       0       0
  3301 ;;Total ram usage:       15 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    1
  3304 ;; This function calls:
  3305 ;;		___ftpack
  3306 ;; This function is called by:
  3307 ;;		_exp
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text17
  3312  0010EE                     __ptext17:
  3313                           	opt stack 0
  3314  0010EE                     ___ftdiv:
  3315                           	opt stack 26
  3316                           
  3317                           ;incstack = 0
  3318  0010EE  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  3319  0010F2  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  3320  0010F4  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  3321  0010F6  340A               	rlcf	___ftdiv@f1+1,w,c
  3322  0010F8  360F               	rlcf	??___ftdiv& (0+255),f,c
  3323  0010FA  E301               	bnc	u1461
  3324  0010FC  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  3325  0010FE                     u1461:
  3326  0010FE  500F               	movf	??___ftdiv,w,c
  3327  001100  6E16               	movwf	___ftdiv@exp,c
  3328  001102  5016               	movf	___ftdiv@exp,w,c
  3329  001104  A4D8               	btfss	status,2,c
  3330  001106  D007               	goto	l362
  3331  001108  0E00               	movlw	0
  3332  00110A  6E09               	movwf	?___ftdiv,c
  3333  00110C  0E00               	movlw	0
  3334  00110E  6E0A               	movwf	?___ftdiv+1,c
  3335  001110  0E00               	movlw	0
  3336  001112  6E0B               	movwf	?___ftdiv+2,c
  3337  001114  0012               	return	
  3338  001116                     l362:
  3339  001116  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  3340  00111A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  3341  00111C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  3342  00111E  340D               	rlcf	___ftdiv@f2+1,w,c
  3343  001120  360F               	rlcf	??___ftdiv& (0+255),f,c
  3344  001122  E301               	bnc	u1481
  3345  001124  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  3346  001126                     u1481:
  3347  001126  500F               	movf	??___ftdiv,w,c
  3348  001128  6E17               	movwf	___ftdiv@sign,c
  3349  00112A  5017               	movf	___ftdiv@sign,w,c
  3350  00112C  A4D8               	btfss	status,2,c
  3351  00112E  D007               	goto	l364
  3352  001130  0E00               	movlw	0
  3353  001132  6E09               	movwf	?___ftdiv,c
  3354  001134  0E00               	movlw	0
  3355  001136  6E0A               	movwf	?___ftdiv+1,c
  3356  001138  0E00               	movlw	0
  3357  00113A  6E0B               	movwf	?___ftdiv+2,c
  3358  00113C  0012               	return	
  3359  00113E                     l364:
  3360  00113E  0E00               	movlw	0
  3361  001140  6E13               	movwf	___ftdiv@f3,c
  3362  001142  0E00               	movlw	0
  3363  001144  6E14               	movwf	___ftdiv@f3+1,c
  3364  001146  0E00               	movlw	0
  3365  001148  6E15               	movwf	___ftdiv@f3+2,c
  3366  00114A  5017               	movf	___ftdiv@sign,w,c
  3367  00114C  0F89               	addlw	137
  3368  00114E  5E16               	subwf	___ftdiv@exp,f,c
  3369  001150  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  3370  001154  500E               	movf	___ftdiv@f2+2,w,c
  3371  001156  1A17               	xorwf	___ftdiv@sign,f,c
  3372  001158  0E80               	movlw	128
  3373  00115A  1617               	andwf	___ftdiv@sign,f,c
  3374  00115C  8E0A               	bsf	___ftdiv@f1+1,7,c
  3375  00115E  0EFF               	movlw	255
  3376  001160  1609               	andwf	___ftdiv@f1,f,c
  3377  001162  0EFF               	movlw	255
  3378  001164  160A               	andwf	___ftdiv@f1+1,f,c
  3379  001166  0E00               	movlw	0
  3380  001168  160B               	andwf	___ftdiv@f1+2,f,c
  3381  00116A  8E0D               	bsf	___ftdiv@f2+1,7,c
  3382  00116C  0EFF               	movlw	255
  3383  00116E  160C               	andwf	___ftdiv@f2,f,c
  3384  001170  0EFF               	movlw	255
  3385  001172  160D               	andwf	___ftdiv@f2+1,f,c
  3386  001174  0E00               	movlw	0
  3387  001176  160E               	andwf	___ftdiv@f2+2,f,c
  3388  001178  0E18               	movlw	24
  3389  00117A  6E12               	movwf	___ftdiv@cntr,c
  3390  00117C  90D8               	bcf	status,0,c
  3391  00117E  3613               	rlcf	___ftdiv@f3,f,c
  3392  001180  3614               	rlcf	___ftdiv@f3+1,f,c
  3393  001182  3615               	rlcf	___ftdiv@f3+2,f,c
  3394  001184  500C               	movf	___ftdiv@f2,w,c
  3395  001186  5C09               	subwf	___ftdiv@f1,w,c
  3396  001188  500D               	movf	___ftdiv@f2+1,w,c
  3397  00118A  580A               	subwfb	___ftdiv@f1+1,w,c
  3398  00118C  500E               	movf	___ftdiv@f2+2,w,c
  3399  00118E  580B               	subwfb	___ftdiv@f1+2,w,c
  3400  001190  A0D8               	btfss	status,0,c
  3401  001192  D007               	goto	l366
  3402  001194  500C               	movf	___ftdiv@f2,w,c
  3403  001196  5E09               	subwf	___ftdiv@f1,f,c
  3404  001198  500D               	movf	___ftdiv@f2+1,w,c
  3405  00119A  5A0A               	subwfb	___ftdiv@f1+1,f,c
  3406  00119C  500E               	movf	___ftdiv@f2+2,w,c
  3407  00119E  5A0B               	subwfb	___ftdiv@f1+2,f,c
  3408  0011A0  8013               	bsf	___ftdiv@f3,0,c
  3409  0011A2                     l366:
  3410  0011A2  90D8               	bcf	status,0,c
  3411  0011A4  3609               	rlcf	___ftdiv@f1,f,c
  3412  0011A6  360A               	rlcf	___ftdiv@f1+1,f,c
  3413  0011A8  360B               	rlcf	___ftdiv@f1+2,f,c
  3414  0011AA  2E12               	decfsz	___ftdiv@cntr,f,c
  3415  0011AC  D7E7               	goto	l365
  3416  0011AE  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  3417  0011B2  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3418  0011B6  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3419  0011BA  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  3420  0011BE  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  3421  0011C2  EC23  F00A         	call	___ftpack	;wreg free
  3422  0011C6  C001  F009         	movff	?___ftpack,?___ftdiv
  3423  0011CA  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  3424  0011CE  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  3425  0011D2  0012               	return	
  3426  0011D4                     __end_of___ftdiv:
  3427                           	opt stack 0
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           prodh	equ	0xFF4
  3433                           prodl	equ	0xFF3
  3434                           postinc0	equ	0xFEE
  3435                           wreg	equ	0xFE8
  3436                           postdec1	equ	0xFE5
  3437                           plusw1	equ	0xFE3
  3438                           fsr1l	equ	0xFE1
  3439                           indf2	equ	0xFDF
  3440                           postinc2	equ	0xFDE
  3441                           postdec2	equ	0xFDD
  3442                           plusw2	equ	0xFDB
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function ___awtoft *****************
  3448 ;; Defined at:
  3449 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  c               2    8[COMRAM] int 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  sign            1   11[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  3    8[COMRAM] float 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         3       0       0       0       0       0       0
  3464 ;;      Locals:         1       0       0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0
  3466 ;;      Totals:         4       0       0       0       0       0       0
  3467 ;;Total ram usage:        4 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    1
  3470 ;; This function calls:
  3471 ;;		___ftpack
  3472 ;; This function is called by:
  3473 ;;		_key_board
  3474 ;;		_exp
  3475 ;;		_log
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text18
  3480  001766                     __ptext18:
  3481                           	opt stack 0
  3482  001766                     ___awtoft:
  3483                           	opt stack 26
  3484                           
  3485                           ;incstack = 0
  3486  001766  0E00               	movlw	0
  3487  001768  6E0C               	movwf	___awtoft@sign,c
  3488  00176A  AE0A               	btfss	___awtoft@c+1,7,c
  3489  00176C  D006               	goto	l279
  3490  00176E  6C09               	negf	___awtoft@c,c
  3491  001770  1E0A               	comf	___awtoft@c+1,f,c
  3492  001772  B0D8               	btfsc	status,0,c
  3493  001774  2A0A               	incf	___awtoft@c+1,f,c
  3494  001776  0E01               	movlw	1
  3495  001778  6E0C               	movwf	___awtoft@sign,c
  3496  00177A                     l279:
  3497  00177A  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3498  00177E  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3499  001782  6A03               	clrf	___ftpack@arg+2,c
  3500  001784  0E8E               	movlw	142
  3501  001786  6E04               	movwf	___ftpack@exp,c
  3502  001788  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3503  00178C  EC23  F00A         	call	___ftpack	;wreg free
  3504  001790  C001  F009         	movff	?___ftpack,?___awtoft
  3505  001794  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3506  001798  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3507  00179C  0012               	return	
  3508  00179E                     __end_of___awtoft:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postdec1	equ	0xFE5
  3519                           plusw1	equ	0xFE3
  3520                           fsr1l	equ	0xFE1
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           postdec2	equ	0xFDD
  3524                           plusw2	equ	0xFDB
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function ___lltoft *****************
  3530 ;; Defined at:
  3531 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  c               4    8[COMRAM] unsigned long 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;  exp             1   16[COMRAM] unsigned char 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  3    8[COMRAM] float 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0, cstack
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3545 ;;      Params:         4       0       0       0       0       0       0
  3546 ;;      Locals:         1       0       0       0       0       0       0
  3547 ;;      Temps:          4       0       0       0       0       0       0
  3548 ;;      Totals:         9       0       0       0       0       0       0
  3549 ;;Total ram usage:        9 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    1
  3552 ;; This function calls:
  3553 ;;		___ftpack
  3554 ;; This function is called by:
  3555 ;;		_pow
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text19
  3560  00168C                     __ptext19:
  3561                           	opt stack 0
  3562  00168C                     ___lltoft:
  3563                           	opt stack 27
  3564                           
  3565                           ;incstack = 0
  3566  00168C  0E8E               	movlw	142
  3567  00168E  6E11               	movwf	___lltoft@exp,c
  3568  001690  D006               	goto	l455
  3569  001692  90D8               	bcf	status,0,c
  3570  001694  320C               	rrcf	___lltoft@c+3,f,c
  3571  001696  320B               	rrcf	___lltoft@c+2,f,c
  3572  001698  320A               	rrcf	___lltoft@c+1,f,c
  3573  00169A  3209               	rrcf	___lltoft@c,f,c
  3574  00169C  2A11               	incf	___lltoft@exp,f,c
  3575  00169E                     l455:
  3576  00169E  0E00               	movlw	0
  3577  0016A0  1409               	andwf	___lltoft@c,w,c
  3578  0016A2  6E0D               	movwf	??___lltoft& (0+255),c
  3579  0016A4  0E00               	movlw	0
  3580  0016A6  140A               	andwf	___lltoft@c+1,w,c
  3581  0016A8  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3582  0016AA  0E00               	movlw	0
  3583  0016AC  140B               	andwf	___lltoft@c+2,w,c
  3584  0016AE  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3585  0016B0  0EFF               	movlw	255
  3586  0016B2  140C               	andwf	___lltoft@c+3,w,c
  3587  0016B4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3588  0016B6  500D               	movf	??___lltoft,w,c
  3589  0016B8  100E               	iorwf	??___lltoft+1,w,c
  3590  0016BA  100F               	iorwf	??___lltoft+2,w,c
  3591  0016BC  1010               	iorwf	??___lltoft+3,w,c
  3592  0016BE  A4D8               	btfss	status,2,c
  3593  0016C0  D7E8               	goto	l456
  3594  0016C2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3595  0016C6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3596  0016CA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3597  0016CE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3598  0016D2  0E00               	movlw	0
  3599  0016D4  6E05               	movwf	___ftpack@sign,c
  3600  0016D6  EC23  F00A         	call	___ftpack	;wreg free
  3601  0016DA  C001  F009         	movff	?___ftpack,?___lltoft
  3602  0016DE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3603  0016E2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3604  0016E6  0012               	return	
  3605  0016E8                     __end_of___lltoft:
  3606                           	opt stack 0
  3607                           tblptru	equ	0xFF8
  3608                           tblptrh	equ	0xFF7
  3609                           tblptrl	equ	0xFF6
  3610                           tablat	equ	0xFF5
  3611                           prodh	equ	0xFF4
  3612                           prodl	equ	0xFF3
  3613                           postinc0	equ	0xFEE
  3614                           wreg	equ	0xFE8
  3615                           postdec1	equ	0xFE5
  3616                           plusw1	equ	0xFE3
  3617                           fsr1l	equ	0xFE1
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           plusw2	equ	0xFDB
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function ___ftpack *****************
  3627 ;; Defined at:
  3628 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  arg             3    0[COMRAM] unsigned um
  3631 ;;  exp             1    3[COMRAM] unsigned char 
  3632 ;;  sign            1    4[COMRAM] unsigned char 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;		None
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  3    0[COMRAM] float 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3644 ;;      Params:         5       0       0       0       0       0       0
  3645 ;;      Locals:         0       0       0       0       0       0       0
  3646 ;;      Temps:          3       0       0       0       0       0       0
  3647 ;;      Totals:         8       0       0       0       0       0       0
  3648 ;;Total ram usage:        8 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		___altoft
  3654 ;;		___awtoft
  3655 ;;		___ftadd
  3656 ;;		___ftdiv
  3657 ;;		___ftmul
  3658 ;;		___lltoft
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text20
  3663  001446                     __ptext20:
  3664                           	opt stack 0
  3665  001446                     ___ftpack:
  3666                           	opt stack 25
  3667                           
  3668                           ;incstack = 0
  3669  001446  5004               	movf	___ftpack@exp,w,c
  3670  001448  B4D8               	btfsc	status,2,c
  3671  00144A  D005               	goto	u970
  3672  00144C  5001               	movf	___ftpack@arg,w,c
  3673  00144E  1002               	iorwf	___ftpack@arg+1,w,c
  3674  001450  1003               	iorwf	___ftpack@arg+2,w,c
  3675  001452  A4D8               	btfss	status,2,c
  3676  001454  D00C               	goto	l298
  3677  001456                     u970:
  3678  001456  0E00               	movlw	0
  3679  001458  6E01               	movwf	?___ftpack,c
  3680  00145A  0E00               	movlw	0
  3681  00145C  6E02               	movwf	?___ftpack+1,c
  3682  00145E  0E00               	movlw	0
  3683  001460  6E03               	movwf	?___ftpack+2,c
  3684  001462  0012               	return	
  3685  001464  2A04               	incf	___ftpack@exp,f,c
  3686  001466  90D8               	bcf	status,0,c
  3687  001468  3203               	rrcf	___ftpack@arg+2,f,c
  3688  00146A  3202               	rrcf	___ftpack@arg+1,f,c
  3689  00146C  3201               	rrcf	___ftpack@arg,f,c
  3690  00146E                     l298:
  3691  00146E  0E00               	movlw	0
  3692  001470  1401               	andwf	___ftpack@arg,w,c
  3693  001472  6E06               	movwf	??___ftpack& (0+255),c
  3694  001474  0E00               	movlw	0
  3695  001476  1402               	andwf	___ftpack@arg+1,w,c
  3696  001478  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3697  00147A  0EFE               	movlw	254
  3698  00147C  1403               	andwf	___ftpack@arg+2,w,c
  3699  00147E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3700  001480  5006               	movf	??___ftpack,w,c
  3701  001482  1007               	iorwf	??___ftpack+1,w,c
  3702  001484  1008               	iorwf	??___ftpack+2,w,c
  3703  001486  B4D8               	btfsc	status,2,c
  3704  001488  D00C               	goto	l301
  3705  00148A  D7EC               	goto	l299
  3706  00148C  2A04               	incf	___ftpack@exp,f,c
  3707  00148E  0E01               	movlw	1
  3708  001490  2601               	addwf	___ftpack@arg,f,c
  3709  001492  0E00               	movlw	0
  3710  001494  2202               	addwfc	___ftpack@arg+1,f,c
  3711  001496  0E00               	movlw	0
  3712  001498  2203               	addwfc	___ftpack@arg+2,f,c
  3713  00149A  90D8               	bcf	status,0,c
  3714  00149C  3203               	rrcf	___ftpack@arg+2,f,c
  3715  00149E  3202               	rrcf	___ftpack@arg+1,f,c
  3716  0014A0  3201               	rrcf	___ftpack@arg,f,c
  3717  0014A2                     l301:
  3718  0014A2  0E00               	movlw	0
  3719  0014A4  1401               	andwf	___ftpack@arg,w,c
  3720  0014A6  6E06               	movwf	??___ftpack& (0+255),c
  3721  0014A8  0E00               	movlw	0
  3722  0014AA  1402               	andwf	___ftpack@arg+1,w,c
  3723  0014AC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3724  0014AE  0EFF               	movlw	255
  3725  0014B0  1403               	andwf	___ftpack@arg+2,w,c
  3726  0014B2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3727  0014B4  5006               	movf	??___ftpack,w,c
  3728  0014B6  1007               	iorwf	??___ftpack+1,w,c
  3729  0014B8  1008               	iorwf	??___ftpack+2,w,c
  3730  0014BA  B4D8               	btfsc	status,2,c
  3731  0014BC  D006               	goto	l304
  3732  0014BE  D7E6               	goto	l302
  3733  0014C0  0604               	decf	___ftpack@exp,f,c
  3734  0014C2  90D8               	bcf	status,0,c
  3735  0014C4  3601               	rlcf	___ftpack@arg,f,c
  3736  0014C6  3602               	rlcf	___ftpack@arg+1,f,c
  3737  0014C8  3603               	rlcf	___ftpack@arg+2,f,c
  3738  0014CA                     l304:
  3739  0014CA  BE02               	btfsc	___ftpack@arg+1,7,c
  3740  0014CC  D003               	goto	u1010
  3741  0014CE  0E02               	movlw	2
  3742  0014D0  6004               	cpfslt	___ftpack@exp,c
  3743  0014D2  D7F6               	goto	l305
  3744  0014D4                     u1010:
  3745  0014D4  A004               	btfss	___ftpack@exp,0,c
  3746  0014D6  9E02               	bcf	___ftpack@arg+1,7,c
  3747  0014D8  90D8               	bcf	status,0,c
  3748  0014DA  3204               	rrcf	___ftpack@exp,f,c
  3749  0014DC  5004               	movf	___ftpack@exp,w,c
  3750  0014DE  1203               	iorwf	___ftpack@arg+2,f,c
  3751  0014E0  5005               	movf	___ftpack@sign,w,c
  3752  0014E2  A4D8               	btfss	status,2,c
  3753  0014E4  8E03               	bsf	___ftpack@arg+2,7,c
  3754  0014E6  C001  F001         	movff	___ftpack@arg,?___ftpack
  3755  0014EA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3756  0014EE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3757  0014F2  0012               	return	
  3758  0014F4                     __end_of___ftpack:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           plusw1	equ	0xFE3
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           plusw2	equ	0xFDB
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function _Seg_display *****************
  3780 ;; Defined at:
  3781 ;;		line 93 in file "main.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  digito          1    wreg     unsigned char 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  digito          1    0[COMRAM] unsigned char 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3795 ;;      Params:         0       0       0       0       0       0       0
  3796 ;;      Locals:         1       0       0       0       0       0       0
  3797 ;;      Temps:          0       0       0       0       0       0       0
  3798 ;;      Totals:         1       0       0       0       0       0       0
  3799 ;;Total ram usage:        1 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text21
  3809  000B5E                     __ptext21:
  3810                           	opt stack 0
  3811  000B5E                     _Seg_display:
  3812                           	opt stack 30
  3813                           
  3814                           ;incstack = 0
  3815                           ;Seg_display@digito stored from wreg
  3816  000B5E  6E01               	movwf	Seg_display@digito,c
  3817                           
  3818                           ;main.c: 94: switch (digito)
  3819  000B60  D083               	goto	l64
  3820  000B62                     
  3821                           ;main.c: 97: PORTC = DIGITOS[0];
  3822  000B62  0E01               	movlw	low _DIGITOS
  3823  000B64  6EF6               	movwf	tblptrl,c
  3824  000B66                     	if	1	;There is more than 1 active tblptr byte
  3825  000B66  0E06               	movlw	high _DIGITOS
  3826  000B68  6EF7               	movwf	tblptrh,c
  3827  000B6A                     	endif
  3828  000B6A                     	if	0	;There are less than 3 active tblptr bytes
  3829  000B6A                     	endif
  3830  000B6A  0008               	tblrd		*
  3831  000B6C  CFF5 FF82          	movff	tablat,3970	;volatile
  3832                           
  3833                           ;main.c: 98: break;
  3834  000B70  0012               	return	
  3835  000B72                     
  3836                           ;main.c: 100: PORTC = DIGITOS[1];
  3837  000B72  0E03               	movlw	low (_DIGITOS+2)
  3838  000B74  6EF6               	movwf	tblptrl,c
  3839  000B76  0E06               	movlw	high (_DIGITOS+2)
  3840  000B78  6EF7               	movwf	tblptrh,c
  3841  000B7A                     	if	0	;tblptru may be non-zero
  3842  000B7A                     	endif
  3843  000B7A                     	if	0	;tblptru may be non-zero
  3844  000B7A                     	endif
  3845  000B7A  0008               	tblrd		*
  3846  000B7C  CFF5 FF82          	movff	tablat,3970	;volatile
  3847                           
  3848                           ;main.c: 101: break;
  3849  000B80  0012               	return	
  3850  000B82                     
  3851                           ;main.c: 103: PORTC = DIGITOS[2];
  3852  000B82  0E05               	movlw	low (_DIGITOS+4)
  3853  000B84  6EF6               	movwf	tblptrl,c
  3854  000B86  0E06               	movlw	high (_DIGITOS+4)
  3855  000B88  6EF7               	movwf	tblptrh,c
  3856  000B8A                     	if	0	;tblptru may be non-zero
  3857  000B8A                     	endif
  3858  000B8A                     	if	0	;tblptru may be non-zero
  3859  000B8A                     	endif
  3860  000B8A  0008               	tblrd		*
  3861  000B8C  CFF5 FF82          	movff	tablat,3970	;volatile
  3862                           
  3863                           ;main.c: 104: break;
  3864  000B90  0012               	return	
  3865  000B92                     
  3866                           ;main.c: 106: PORTC = DIGITOS[3];
  3867  000B92  0E07               	movlw	low (_DIGITOS+6)
  3868  000B94  6EF6               	movwf	tblptrl,c
  3869  000B96  0E06               	movlw	high (_DIGITOS+6)
  3870  000B98  6EF7               	movwf	tblptrh,c
  3871  000B9A                     	if	0	;tblptru may be non-zero
  3872  000B9A                     	endif
  3873  000B9A                     	if	0	;tblptru may be non-zero
  3874  000B9A                     	endif
  3875  000B9A  0008               	tblrd		*
  3876  000B9C  CFF5 FF82          	movff	tablat,3970	;volatile
  3877                           
  3878                           ;main.c: 107: break;
  3879  000BA0  0012               	return	
  3880  000BA2                     
  3881                           ;main.c: 109: PORTC = DIGITOS[4];
  3882  000BA2  0E09               	movlw	low (_DIGITOS+8)
  3883  000BA4  6EF6               	movwf	tblptrl,c
  3884  000BA6  0E06               	movlw	high (_DIGITOS+8)
  3885  000BA8  6EF7               	movwf	tblptrh,c
  3886  000BAA                     	if	0	;tblptru may be non-zero
  3887  000BAA                     	endif
  3888  000BAA                     	if	0	;tblptru may be non-zero
  3889  000BAA                     	endif
  3890  000BAA  0008               	tblrd		*
  3891  000BAC  CFF5 FF82          	movff	tablat,3970	;volatile
  3892                           
  3893                           ;main.c: 110: break;
  3894  000BB0  0012               	return	
  3895  000BB2                     
  3896                           ;main.c: 112: PORTC = DIGITOS[5];
  3897  000BB2  0E0B               	movlw	low (_DIGITOS+10)
  3898  000BB4  6EF6               	movwf	tblptrl,c
  3899  000BB6  0E06               	movlw	high (_DIGITOS+10)
  3900  000BB8  6EF7               	movwf	tblptrh,c
  3901  000BBA                     	if	0	;tblptru may be non-zero
  3902  000BBA                     	endif
  3903  000BBA                     	if	0	;tblptru may be non-zero
  3904  000BBA                     	endif
  3905  000BBA  0008               	tblrd		*
  3906  000BBC  CFF5 FF82          	movff	tablat,3970	;volatile
  3907                           
  3908                           ;main.c: 113: break;
  3909  000BC0  0012               	return	
  3910  000BC2                     
  3911                           ;main.c: 115: PORTC = DIGITOS[6];
  3912  000BC2  0E0D               	movlw	low (_DIGITOS+12)
  3913  000BC4  6EF6               	movwf	tblptrl,c
  3914  000BC6  0E06               	movlw	high (_DIGITOS+12)
  3915  000BC8  6EF7               	movwf	tblptrh,c
  3916  000BCA                     	if	0	;tblptru may be non-zero
  3917  000BCA                     	endif
  3918  000BCA                     	if	0	;tblptru may be non-zero
  3919  000BCA                     	endif
  3920  000BCA  0008               	tblrd		*
  3921  000BCC  CFF5 FF82          	movff	tablat,3970	;volatile
  3922                           
  3923                           ;main.c: 116: break;
  3924  000BD0  0012               	return	
  3925  000BD2                     
  3926                           ;main.c: 118: PORTC = DIGITOS[7];
  3927  000BD2  0E0F               	movlw	low (_DIGITOS+14)
  3928  000BD4  6EF6               	movwf	tblptrl,c
  3929  000BD6  0E06               	movlw	high (_DIGITOS+14)
  3930  000BD8  6EF7               	movwf	tblptrh,c
  3931  000BDA                     	if	0	;tblptru may be non-zero
  3932  000BDA                     	endif
  3933  000BDA                     	if	0	;tblptru may be non-zero
  3934  000BDA                     	endif
  3935  000BDA  0008               	tblrd		*
  3936  000BDC  CFF5 FF82          	movff	tablat,3970	;volatile
  3937                           
  3938                           ;main.c: 119: break;
  3939  000BE0  0012               	return	
  3940  000BE2                     
  3941                           ;main.c: 121: PORTC = DIGITOS[8];
  3942  000BE2  0E11               	movlw	low (_DIGITOS+16)
  3943  000BE4  6EF6               	movwf	tblptrl,c
  3944  000BE6  0E06               	movlw	high (_DIGITOS+16)
  3945  000BE8  6EF7               	movwf	tblptrh,c
  3946  000BEA                     	if	0	;tblptru may be non-zero
  3947  000BEA                     	endif
  3948  000BEA                     	if	0	;tblptru may be non-zero
  3949  000BEA                     	endif
  3950  000BEA  0008               	tblrd		*
  3951  000BEC  CFF5 FF82          	movff	tablat,3970	;volatile
  3952                           
  3953                           ;main.c: 122: break;
  3954  000BF0  0012               	return	
  3955  000BF2                     
  3956                           ;main.c: 124: PORTC = DIGITOS[9];
  3957  000BF2  0E13               	movlw	low (_DIGITOS+18)
  3958  000BF4  6EF6               	movwf	tblptrl,c
  3959  000BF6  0E06               	movlw	high (_DIGITOS+18)
  3960  000BF8  6EF7               	movwf	tblptrh,c
  3961  000BFA                     	if	0	;tblptru may be non-zero
  3962  000BFA                     	endif
  3963  000BFA                     	if	0	;tblptru may be non-zero
  3964  000BFA                     	endif
  3965  000BFA  0008               	tblrd		*
  3966  000BFC  CFF5 FF82          	movff	tablat,3970	;volatile
  3967                           
  3968                           ;main.c: 125: break;
  3969  000C00  0012               	return	
  3970  000C02                     
  3971                           ;main.c: 127: PORTC = DIGITOS[10];
  3972  000C02  0E15               	movlw	low (_DIGITOS+20)
  3973  000C04  6EF6               	movwf	tblptrl,c
  3974  000C06  0E06               	movlw	high (_DIGITOS+20)
  3975  000C08  6EF7               	movwf	tblptrh,c
  3976  000C0A                     	if	0	;tblptru may be non-zero
  3977  000C0A                     	endif
  3978  000C0A                     	if	0	;tblptru may be non-zero
  3979  000C0A                     	endif
  3980  000C0A  0008               	tblrd		*
  3981  000C0C  CFF5 FF82          	movff	tablat,3970	;volatile
  3982                           
  3983                           ;main.c: 128: break;
  3984  000C10  0012               	return	
  3985  000C12                     
  3986                           ;main.c: 130: PORTC = DIGITOS[11];
  3987  000C12  0E17               	movlw	low (_DIGITOS+22)
  3988  000C14  6EF6               	movwf	tblptrl,c
  3989  000C16  0E06               	movlw	high (_DIGITOS+22)
  3990  000C18  6EF7               	movwf	tblptrh,c
  3991  000C1A                     	if	0	;tblptru may be non-zero
  3992  000C1A                     	endif
  3993  000C1A                     	if	0	;tblptru may be non-zero
  3994  000C1A                     	endif
  3995  000C1A  0008               	tblrd		*
  3996  000C1C  CFF5 FF82          	movff	tablat,3970	;volatile
  3997                           
  3998                           ;main.c: 131: break;
  3999  000C20  0012               	return	
  4000  000C22                     
  4001                           ;main.c: 133: PORTC = DIGITOS[12];
  4002  000C22  0E19               	movlw	low (_DIGITOS+24)
  4003  000C24  6EF6               	movwf	tblptrl,c
  4004  000C26  0E06               	movlw	high (_DIGITOS+24)
  4005  000C28  6EF7               	movwf	tblptrh,c
  4006  000C2A                     	if	0	;tblptru may be non-zero
  4007  000C2A                     	endif
  4008  000C2A                     	if	0	;tblptru may be non-zero
  4009  000C2A                     	endif
  4010  000C2A  0008               	tblrd		*
  4011  000C2C  CFF5 FF82          	movff	tablat,3970	;volatile
  4012                           
  4013                           ;main.c: 134: break;
  4014  000C30  0012               	return	
  4015  000C32                     
  4016                           ;main.c: 136: PORTC = DIGITOS[13];
  4017  000C32  0E1B               	movlw	low (_DIGITOS+26)
  4018  000C34  6EF6               	movwf	tblptrl,c
  4019  000C36  0E06               	movlw	high (_DIGITOS+26)
  4020  000C38  6EF7               	movwf	tblptrh,c
  4021  000C3A                     	if	0	;tblptru may be non-zero
  4022  000C3A                     	endif
  4023  000C3A                     	if	0	;tblptru may be non-zero
  4024  000C3A                     	endif
  4025  000C3A  0008               	tblrd		*
  4026  000C3C  CFF5 FF82          	movff	tablat,3970	;volatile
  4027                           
  4028                           ;main.c: 137: break;
  4029  000C40  0012               	return	
  4030  000C42                     
  4031                           ;main.c: 139: PORTC = DIGITOS[14];
  4032  000C42  0E1D               	movlw	low (_DIGITOS+28)
  4033  000C44  6EF6               	movwf	tblptrl,c
  4034  000C46  0E06               	movlw	high (_DIGITOS+28)
  4035  000C48  6EF7               	movwf	tblptrh,c
  4036  000C4A                     	if	0	;tblptru may be non-zero
  4037  000C4A                     	endif
  4038  000C4A                     	if	0	;tblptru may be non-zero
  4039  000C4A                     	endif
  4040  000C4A  0008               	tblrd		*
  4041  000C4C  CFF5 FF82          	movff	tablat,3970	;volatile
  4042                           
  4043                           ;main.c: 140: break;
  4044  000C50  0012               	return	
  4045  000C52                     
  4046                           ;main.c: 142: PORTC = DIGITOS[15];
  4047  000C52  0E1F               	movlw	low (_DIGITOS+30)
  4048  000C54  6EF6               	movwf	tblptrl,c
  4049  000C56  0E06               	movlw	high (_DIGITOS+30)
  4050  000C58  6EF7               	movwf	tblptrh,c
  4051  000C5A                     	if	0	;tblptru may be non-zero
  4052  000C5A                     	endif
  4053  000C5A                     	if	0	;tblptru may be non-zero
  4054  000C5A                     	endif
  4055  000C5A  0008               	tblrd		*
  4056  000C5C  CFF5 FF82          	movff	tablat,3970	;volatile
  4057                           
  4058                           ;main.c: 143: break;
  4059  000C60  0012               	return	
  4060  000C62                     
  4061                           ;main.c: 146: PORTC = 0x80;
  4062  000C62  0E80               	movlw	128
  4063  000C64  6E82               	movwf	3970,c	;volatile
  4064                           
  4065                           ;main.c: 149: }
  4066                           
  4067                           ;main.c: 147: break;
  4068  000C66  0012               	return	
  4069  000C68                     l64:
  4070  000C68  5001               	movf	Seg_display@digito,w,c
  4071                           
  4072                           ; Switch size 1, requested type "space"
  4073                           ; Number of cases is 16, Range of values is 48 to 70
  4074                           ; switch strategies available:
  4075                           ; Name         Instructions Cycles
  4076                           ; simple_byte           49    25 (average)
  4077                           ;	Chosen strategy is simple_byte
  4078  000C6A  0A30               	xorlw	48	; case 48
  4079  000C6C  B4D8               	btfsc	status,2,c
  4080  000C6E  D779               	goto	l65
  4081  000C70  0A01               	xorlw	1	; case 49
  4082  000C72  B4D8               	btfsc	status,2,c
  4083  000C74  D77E               	goto	l67
  4084  000C76  0A03               	xorlw	3	; case 50
  4085  000C78  B4D8               	btfsc	status,2,c
  4086  000C7A  D783               	goto	l68
  4087  000C7C  0A01               	xorlw	1	; case 51
  4088  000C7E  B4D8               	btfsc	status,2,c
  4089  000C80  D788               	goto	l69
  4090  000C82  0A07               	xorlw	7	; case 52
  4091  000C84  B4D8               	btfsc	status,2,c
  4092  000C86  D78D               	goto	l70
  4093  000C88  0A01               	xorlw	1	; case 53
  4094  000C8A  B4D8               	btfsc	status,2,c
  4095  000C8C  D792               	goto	l71
  4096  000C8E  0A03               	xorlw	3	; case 54
  4097  000C90  B4D8               	btfsc	status,2,c
  4098  000C92  D797               	goto	l72
  4099  000C94  0A01               	xorlw	1	; case 55
  4100  000C96  B4D8               	btfsc	status,2,c
  4101  000C98  D79C               	goto	l73
  4102  000C9A  0A0F               	xorlw	15	; case 56
  4103  000C9C  B4D8               	btfsc	status,2,c
  4104  000C9E  D7A1               	goto	l74
  4105  000CA0  0A01               	xorlw	1	; case 57
  4106  000CA2  B4D8               	btfsc	status,2,c
  4107  000CA4  D7A6               	goto	l75
  4108  000CA6  0A78               	xorlw	120	; case 65
  4109  000CA8  B4D8               	btfsc	status,2,c
  4110  000CAA  D7AB               	goto	l76
  4111  000CAC  0A03               	xorlw	3	; case 66
  4112  000CAE  B4D8               	btfsc	status,2,c
  4113  000CB0  D7B0               	goto	l77
  4114  000CB2  0A01               	xorlw	1	; case 67
  4115  000CB4  B4D8               	btfsc	status,2,c
  4116  000CB6  D7B5               	goto	l78
  4117  000CB8  0A07               	xorlw	7	; case 68
  4118  000CBA  B4D8               	btfsc	status,2,c
  4119  000CBC  D7BA               	goto	l79
  4120  000CBE  0A01               	xorlw	1	; case 69
  4121  000CC0  B4D8               	btfsc	status,2,c
  4122  000CC2  D7BF               	goto	l80
  4123  000CC4  0A03               	xorlw	3	; case 70
  4124  000CC6  B4D8               	btfsc	status,2,c
  4125  000CC8  D7C4               	goto	l81
  4126  000CCA  D7CB               	goto	l82
  4127  000CCC                     __end_of_Seg_display:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           plusw1	equ	0xFE3
  4139                           fsr1l	equ	0xFE1
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           plusw2	equ	0xFDB
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postdec1	equ	0xFE5
  4156                           plusw1	equ	0xFE3
  4157                           fsr1l	equ	0xFE1
  4158                           indf2	equ	0xFDF
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           plusw2	equ	0xFDB
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166                           	psect	rparam
  4167  0000                     tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postdec1	equ	0xFE5
  4176                           plusw1	equ	0xFE3
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           plusw2	equ	0xFDB
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    89
    Data        32
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     88      93
    BANK0           160     27      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_key_board
    _key_board->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_key_board

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   68719
                        _Seg_display
                          _key_board
 ---------------------------------------------------------------------------------
 (1) _key_board                                           31    31      0   68704
                                             84 COMRAM     4     4      0
                                              0 BANK0     27    27      0
                           ___awtoft
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   65075
                                             67 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   21096
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   35324
                                             58 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    9183
                                             39 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     556
                                             12 COMRAM    15    11      4
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2758
                                             27 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7    9249
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3882
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4615
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4270
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3102
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2863
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Seg_display                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Seg_display
   _key_board
     ___awtoft
       ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      3F       5       39.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     58      5D       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      15        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Oct 13 02:10:36 2022

           ___altoft@exp 0024            ___altoft@sign 0025                       l41 17BC  
                     l50 0DD4                       l51 0DC4                       l52 0D64  
                     l53 0D72                       l70 0BA2                       l54 0D80  
                     l71 0BB2                       l55 0D8E                       l64 0C68  
                     l80 0C42                       l72 0BC2                       l81 0C52  
                     l73 0BD2                       l65 0B62                       l49 0CFC  
                     l82 0C62                       l74 0BE2                       l75 0BF2  
                     l67 0B72                       l76 0C02                       l68 0B82  
                     l77 0C12                       l69 0B92                       l78 0C22  
                     l79 0C32      ___wmul@multiplicand 0003             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 0027             ___ftadd@exp2 0026             ___ftadd@sign 0025  
                    l301 14A2                      l302 148C                      l304 14CA  
                    l400 0FA8                      l305 14C0                      l401 0F98  
                    l333 08BC                      l406 0FCC                      l343 0918  
                    l407 0FC0                      l352 0956                      l344 090E  
                    l168 1642                      l520 0A48                      l353 094C  
                    l329 0892                      l169 1636                      l409 0FE8  
                    l521 0ACC                      l362 1116                      l338 0922  
                    l370 15B4                      l522 0AAA                      l355 097A  
                    l371 15E4                      l523 0B50                      l364 113E  
                    l356 0996                      l380 107C                      l365 117C  
                    l357 09C6                      l381 108C                      l701 139C  
                    l517 0A30                      l366 11A2                      l518 0A22  
                    l455 169E                      l279 177A                      l383 10A4  
                    l703 13E0                      l456 1692                      l384 10B4  
                    l377 1022                      l705 140E                      l721 0E26  
                    l298 146E                      l394 16FE                      l706 1402  
                    l299 1464                      l379 104A                      l388 1802  
                    l398 0F32                      l727 136E                      l719 0E06  
                    l728 12F2                      l680 06E0                      l681 070E  
                    l682 0832                      l691 122A                      l683 0808  
                    l692 12A4                      l677 0674                      l679 06AA  
                    l688 1210                      l697 151C                      l689 1202  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u970 1456  
                    _exp 065C                      _log 0DEC                      _pow 09EC  
           __CFG_BORV$30 000000                      wreg 000FE8          __end_of_DIGITOS 0621  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0012             ___ftdiv@sign 0017  
                   l1432 1610                     l1904 0808                     l1988 0DD4  
                   ?_exp 003B                     ?_log 0034                     ?_pow 0044  
                   u1010 14D4                     u1100 0884                     u1200 092A  
                   u1130 08AE                     u1061 0850                     u1230 095E  
                   u1071 0864                     u1160 08EC                     u1420 0FD2  
                   u1271 100A                     u1600 13BC                     u1361 0F16  
                   u1450 1544                     u1291 1032                     u1380 0F50  
                   u1700 06E8                     u1461 10FE                     u1710 06EA  
                   u1560 121C                     u1608 13BE                     u1481 1126  
                   u1385 0F48                     u1458 1546                     u1811 0CDC  
                   u1790 0A94                     u1880 0DD4                     u1897 0DDA  
       key_board@columna 0097                     _flag 005B                     _main 179E  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   exp@x 003B                     log@x 0034                     pow@x 0044  
                   pow@y 0047                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000             ___ftmul@cntr 001A  
           ___param_bank 000000             ___ftmul@sign 001B             ___fttol@exp1 001B  
                  ??_exp 003E                    ??_log 0037             ___fttol@lval 0017  
                  ??_pow 004A                    ?_main 0001          __end_of___ftadd 09EC  
        __end_of___ftdiv 11D4          __end_of___ftneg 1810                    _ANSEL 000F7E  
        __end_of___ftmul 10EE          __end_of___ftsub 1728          __end_of___fttol 0FFA  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000                    _S_Seg 0070  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
      key_board@key_pres 0096           __CFG_EBTRB$OFF 000000            ___awtoft@sign 000C  
                  _floor 11D4                    _ldexp 1384                    _frexp 14F4  
                  _errno 0059                    _letra 005D            ___ftpack@sign 0005  
                  tablat 000FF5                    pow@yi 0051                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8           __CFG_PBADEN$ON 000000  
            exp@exponent 0041            ??_Seg_display 0001              ldexp@newexp 0037  
         __CFG_MCLRE$OFF 000000          __initialization 1728              log@exponent 0037  
           __end_of_main 17C6   key_board@counter_filas 0099                   ??_main 0059  
          ___fttol@sign1 0016            __activetblptr 000002                   ?_floor 0028  
                 ?_ldexp 0034                   ?_frexp 0001         __end_of___altoft 168C  
       __end_of___awtoft 179E         __end_of___ftpack 14F4                   _ANSELH 000F7F  
       __end_of___lltoft 16E8           __CFG_WDTEN$OFF 000000           __CFG_XINST$OFF 000000  
                 ___ftge 1584                   ___wmul 17C6                ??___ftadd 0022  
         __CFG_STVREN$ON 000000                ??___ftdiv 000F                ??___ftneg 0004  
              ??___ftmul 0013                ??___ftsub 002E                ??___fttol 0011  
    __end_of_Seg_display 0CCC                   floor@i 002B                   floor@x 0028  
  ___ftmul@f3_as_product 0017             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            _key_board$795 0090  
          _key_board$796 0093         __end_ofexp@coeff 063F         __end_oflog@coeff 065A  
             __accesstop 0060  __end_of__initialization 175C               ___altoft@c 001C  
             ___ftadd@f1 001C               ___ftadd@f2 001F               ___ftge@ff1 0001  
             ___ftge@ff2 0004             eval_poly@res 0031            ___rparam_used 000001  
             ___ftdiv@f1 0009               ___ftdiv@f2 000C               ___ftdiv@f3 0013  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 000D  
             ___ftmul@f2 0010               ___ftsub@f1 0028               ___ftsub@f2 002B  
             ___fttol@f1 000D           __pcstackCOMRAM 0001             __pidataBANK0 1810  
             ___lltoft@c 0009            __end_of_floor 12B2            __end_of_ldexp 1446  
          __end_of_frexp 1584                  ??_floor 002B                  ??_ldexp 0039  
                ??_frexp 0006               __pbssBANK0 009B       __size_of_eval_poly 00D2  
     __size_of_key_board 0120              _Seg_display 0B5E                  ?___ftge 0001  
                ?___wmul 0001                ?___altoft 001C                ?___awtoft 0009  
              ?___ftpack 0001                  _DIGITOS 0601                ?___lltoft 0009  
                __Hparam 0000                  __Lparam 0000          __size_of___ftge 0090  
                ___ftadd 0840                  ___ftdiv 10EE                  ___ftneg 17EC  
        __size_of___wmul 0026                  ___ftmul 0FFA                  ___ftsub 16E8  
                ___fttol 0F06             __psmallconst 0600               ??___altoft 0020  
                _exp$799 003E                  __pcinit 1728               ??___awtoft 000C  
             ??___ftpack 0006        __end_of_eval_poly 1384                  __ramtop 0600  
             ??___lltoft 000D                  __ptext0 179E                  __ptext1 0CCC  
                __ptext2 09EC                  __ptext3 0DEC                  __ptext4 065C  
                __ptext5 1384                  __ptext6 11D4                  __ptext7 14F4  
                __ptext8 0F06                  __ptext9 1584                  _pow$797 004A  
                _pow$798 004D        __end_of_key_board 0DEC             __size_of_exp 01E4  
           __size_of_log 011A             __size_of_pow 0172     end_of_initialization 175C  
                exp@sign 0043            __Lmediumconst 0000                  pow@sign 0050  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                _PORTBbits 000F81           key_board@F3278 0060  
            ___ftdiv@exp 0016              ___ftmul@exp 0016           __end_of___ftge 1614  
         __end_of___wmul 17EC               floor@expon 002E      start_initialization 1728  
             eval_poly@d 002B               eval_poly@n 002D               eval_poly@x 0028  
             ldexp@value 0034              __end_of_exp 0840              __end_of_log 0F06  
            __end_of_pow 0B5E               frexp@value 0001             ?_Seg_display 0001  
               ??___ftge 0007                 ??___wmul 0005              __pdataBANK0 0060  
       __CFG_LPT1OSC$OFF 000000        __size_of___altoft 0078        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 0059  
          __pcstackBANK0 0080        __CFG_CCP2MX$PORTC 000000                 ?___ftadd 001C  
               ?___ftdiv 0009                 ?___ftneg 0001                 ?___ftmul 000D  
               ?___ftsub 0028                 ?___fttol 000D              __smallconst 0600  
              _eval_poly 12B2                _key_board 0CCC           __size_of_floor 00DE  
         __size_of_ldexp 00C2           __size_of_frexp 0090           ___wmul@product 0005  
       __CFG_WDTPS$32768 000000                _resultado 009B        ___wmul@multiplier 0001  
          key_board@keys 0080               ?_eval_poly 0028               ?_key_board 0001  
              copy_data0 173C                frexp@eptr 0004                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000     __size_of_Seg_display 016E  
       __size_of___ftadd 01AC         __size_of___ftdiv 00E6         __size_of___ftneg 0024  
               ___altoft 1614         __size_of___ftmul 00F4         __size_of___ftsub 0040  
       __size_of___fttol 00F4                 ___awtoft 1766                 ___ftpack 1446  
               ___lltoft 168C                 __ptext10 1614                 __ptext11 12B2  
               __ptext20 1446                 __ptext12 17C6                 __ptext21 0B5E  
               __ptext13 0FFA                 __ptext14 16E8                 __ptext15 0840  
               __ptext16 17EC                 __ptext17 10EE                 __ptext18 1766  
               __ptext19 168C            __size_of_main 0028                 exp@coeff 0621  
               log@coeff 063F              ??_eval_poly 002F              ??_key_board 0055  
      Seg_display@digito 0001        __CFG_FOSC$INTIO67 000000  
